# Load the package mgcv
library(mgcv)
library(clusterR)
install.packages("ClusterR")
library(mgcv)
library(clusterR)
library(clusterR)
library(ClusterR)
# Create the formula
(fmla.gam <- weight ~ s(Time))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = soybean_train, family = gaussian)
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = soybean_train, family = gaussian)
mgcv
# Create the formula
(fmla.gam <- weight ~ s(Time))
install.packages('mlbench')
# Load data
# install.packages('mlbench')
data(BreastCancer, package="mlbench")
bc <- BreastCancer[complete.cases(BreastCancer), ]  # keep complete rows
View(bc)
# Create the formula
(fmla.gam <- Cell.size ~ s(Class))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
# Create the formula
(fmla.gam <- Cell.size ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
# Create the formula
(fmla.gam <- Cell.size ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
# Create the formula
(fmla.gam <- s(Cell.size) ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
# Create the formula
(fmla.gam <- (Cell.size ~ Cell.shape)
# Create the formula
(fmla.gam <- (Cell.size ~ Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
(fmla.gam <- (Cell.size ~ s(Cell.shape))
(fmla.gam <- (Cell.size ~ s(Cell.shape)))
(fmla.gam <- (Cell.size ~ s(Cell.shape)))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
(fmla.gam <- (Cell.size ~ s(Cell.shape)))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
fmla.gam <- (Cell.size ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
fmla.gam <- (Cell.size ~ s(CI.thickness))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
fmla.gam <- (Cell.size ~ s(CI.thickness))
fmla.gam <- (Cell.size ~ s(Cl.thickness))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
class(bc)
as.numeric(bc$Cell.shape)
as.numeric(bc$Cell.size)
fmla.gam <- (Cell.size ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
as.list(bc$Cell.size)
as.numeric(bc$Cell.shape)
as.numeric(bc$Cell.size)
fmla.gam <- (Cell.size ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
as.numeric(bc$Cell.shape)
as.numeric(bc$Cell.size)
class(bc$Cell.size)
bc$Cell.shape <- as.numeric(bc$Cell.shape)
class(bc$Cell.size)
bc$Cell.shape <- as.numeric(bc$Cell.shape)
class(bc$Cell.size)
bc$Cell.shape <- as.numeric(bc$Cell.shape)
bc$Cell.size <-as.numeric(bc$Cell.size)
class(bc$Cell.size)
fmla.gam <- (Cell.size ~ s(Cell.shape))
# Fit the GAM Model
model.gam <- gam(fmla.gam, data = bc, family = gaussian)
# Call summary() on model.lin and look for R-squared
summary(model.lin)
# Call summary() on model.gam and look for R-squared
summary(model.gam)
# Call plot() on model.gam
plot(model.gam)
# Get predictions from gam model
bc$pred.gam <- as.numeric(predict(model.gam, newdata = bc))
# Gather the predictions into a "long" dataset
bc_long <- bc %>%
gather(key = modeltype, value = pred, pred.lin, pred.gam)
library(broom)
library(sigr)
library(tidyverse)
# load data for logistic regression analysis
library(survival)
library(survminer)
data(lung)
dim(lung)
# Get predictions from gam model
bc$pred.gam <- as.numeric(predict(model.gam, newdata = bc))
# Gather the predictions into a "long" dataset
bc_long <- bc %>%
gather(key = modeltype, value = pred, pred.lin, pred.gam)
# Calculate the rmse
bc_long %>%
mutate(residual = weight - pred) %>%     # residuals
group_by(modeltype) %>%                  # group by modeltype
summarize(rmse = sqrt(mean(residual^2))) # calculate the RMSE
# Compare the predictions against actual weights on the test data
bc_long %>%
ggplot(aes(x = Time)) +                          # the column for the x axis
geom_point(aes(y = weight)) +                    # the y-column for the scatterplot
geom_point(aes(y = pred, color = modeltype)) +   # the y-column for the point-and-line plot
geom_line(aes(y = pred, color = modeltype, linetype = modeltype)) + # the y-column for the point-and-line plot
scale_color_brewer(palette = "Dark2")
model.lin <- glm(Cell.size ~ Cell.shape)
model.lin <- glm(Cell.size ~ Cell.shape, data = bc)
# Call summary() on model.lin and look for R-squared
summary(model.lin)
# Get predictions from gam model
bc$pred.gam <- as.numeric(predict(model.gam, newdata = bc))
# Gather the predictions into a "long" dataset
bc_long <- bc %>%
gather(key = modeltype, value = pred, pred.lin, pred.gam)
bc$pred.lin <- as.numeric(predict(model.lin, newdata = bc))
# Gather the predictions into a "long" dataset
bc_long <- bc %>%
gather(key = modeltype, value = pred, pred.lin, pred.gam)
# Calculate the rmse
bc_long %>%
mutate(residual = weight - pred) %>%     # residuals
group_by(modeltype) %>%                  # group by modeltype
summarize(rmse = sqrt(mean(residual^2))) # calculate the RMSE
# Calculate the rmse
bc_long %>%
mutate(residual = Cell.size - pred) %>%     # residuals
group_by(modeltype) %>%                  # group by modeltype
summarize(rmse = sqrt(mean(residual^2))) # calculate the RMSE
# Compare the predictions against actual weights on the test data
bc_long %>%
ggplot(aes(x = Cell.size)) +                          # the column for the x axis
geom_point(aes(y = Cell.shape)) +                    # the y-column for the scatterplot
geom_point(aes(y = pred, color = modeltype)) +   # the y-column for the point-and-line plot
geom_line(aes(y = pred, color = modeltype, linetype = modeltype)) + # the y-column for the point-and-line plot
scale_color_brewer(palette = "Dark2")
fread(url)
# get the data
url <- "https://s3.amazonaws.com/capitalbikeshare-data/2010-capitalbikeshare-tripdata.zip"
fread(url)
data.table::fread(url)
bikes <- data.table::fread(url)
bikes <- read_csv(url)
View(bikes)
bikes <- read.table(url)
View(bikes)
bikes <- GET(url)
bikes <- readxl::read_excel(url)
# get the data
url <- "https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip"
# get the data
download.file("http://api.worldbank.org/v2/en/country/gbr?downloadformat=csv",
temp)
# get the data
tmp <- tempfile()
download.file("http://api.worldbank.org/v2/en/country/gbr?downloadformat=csv",
tmp)
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip",
tmp)
bikes <- unz(tmp, "hour.csv")
bikedat <- read.table(bikes, header = T, sep = ",")
View(BreastCancer)
View(bikedat)
str(bikedat)
# bikedat is in the workspace
str(bikedat)
# Random seed to reproduce results
seed
# the outcome column
(outcome <- "cnt")
# The input variables
(vars <- c("hr", "holiday", "workingday", "weathersit", "temp", "atemp", "hum", "windspeed"))
# Create the formula string for bikes rented as a function of the inputs
(fmla <- paste(outcome, "~", paste(vars, collapse = " + ")))
# Load the package ranger
library(ranger)
install.packages("ranger")
# Load the package ranger
library(ranger)
# Fit and print the random forest model.
(bike_model_rf <- ranger(fmla,
bikedat,
num.trees = 500,
respect.unordered.factors = "order",
seed = seed))
# Create the formula string for bikes rented as a function of the inputs
(fmla <- paste(outcome, "~", paste(vars, collapse = " + ")))
# Load the package ranger
library(ranger)
# Fit and print the random forest model.
(bike_model_rf <- ranger(fmla,
bikedat,
num.trees = 500,
respect.unordered.factors = "order",
seed = seed))
# Random seed to reproduce results
seed
# Random seed to reproduce results
seed <- set.seed(1)
# Fit and print the random forest model.
(bike_model_rf <- ranger(fmla,
bikedat,
num.trees = 500,
respect.unordered.factors = "order",
seed = seed))
# Random seed to reproduce results
seed <- set.seed(423563)
# Fit and print the random forest model.
(bike_model_rf <- ranger(fmla,
bikedat,
num.trees = 500,
respect.unordered.factors = "order",
seed = seed))
install.packages("kableExtra")
tmp <- tempfile()
download.file("https://archive.ics.uci.edu/ml/machine-learning-databases/00275/Bike-Sharing-Dataset.zip",
tmp)
bikes <- unz(tmp, "hour.csv")
bikedat <- read.table(bikes, header = T, sep = ",")
(bike_model_rf <- ranger(fmla,
bikedat,
num.trees = 500,
respect.unordered.factors = "order",
seed = seed))
detach("package:base", unload = TRUE)
