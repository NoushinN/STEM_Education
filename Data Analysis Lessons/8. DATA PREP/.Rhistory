move <- function(movies) {
if (movies[1] & movies[2] & movies[3]) {
current <- 11 # Go To Jail
}
}
# Define the improved solution
improved_move <- function(movies) {
if (movies[1] && movies[2] && movies[3]) {
current <- 11 # Go To Jail
}
}
microbenchmark(move(movies), improved_move(movies), times = 1e5)
# CPUs - why do we have more than one
library(parallel)
# Store the number of cores in the object no_of_cores
no_of_cores <- detectCores()
# Print no_of_cores
no_of_cores
# Determine the number of available cores.
detectCores()
# Create a cluster via makeCluster
cl <- makeCluster(2)
# Parallelize this code
parApply(cl, dd, 2, median)
dd <- data.frame[100,100]
dd <- as.data.frame[100,100]
dd <- data.frame(x=rnorm(100), y=runif(100))
# Parallelize this code
parApply(cl, dd, 2, median)
# Parallelize this code
parApply(cl, dd, 2, median)
# Stop the cluster
stopCluster(cl)
# The parallel package - parSapply
# Create a cluster via makeCluster (2 cores)
cl <- makeCluster(2)
# Export the play() function to the cluster
clusterExport(cl, "play")
play <- function() {
total <- no_of_rolls <- 0
while(total < 10) {
total <- total + sample(1:6, 1)
# If even. Reset to 0
if(total %% 2 == 0) total <- 0
no_of_rolls <- no_of_rolls + 1
}
no_of_rolls
}
# Export the play() function to the cluster
clusterExport(cl, "play")
# Re-write the above sapply as parSapply
res <- parSapply(cl, 1:100, function(i) play())
# Stop the cluster
stopCluster(cl)
no_of_games <- 1e5
system.time(serial <- sapply(1:no_of_games, function(i) play()))
cl <- makeCluster(4)
clusterExport(cl, "play")
## Time parallel version
system.time(par <- parSapply(cl, 1:no_of_games, function(i) play()))
## Stop cluster
stopCluster(cl)
install.packages("bigmemory")
library(bigmemory)
x <- read.big.matrix("mortgage-sample.csv", header = TRUE,
type = "integer",
backingfile = "mortgage-sample.bin",
descriptorfile = "mortgage-sample.desc")
# Find the dimensions of x
dim(x)
mort <- attach.big.matrix("mortgage-sample.desc")
# Find the dimensions of mort
dim(mort)
# Look at the first 6 rows of mort
head(mort)
install.packages("biganalytics")
library(biganalytics)
# Get the column means of mort
colmean(mort)
# Use biganalytics' summary function to get a summary of the data
summary(mort)
morgage_data <- read_delim("https://www.fhfa.gov/DataTools/Downloads/Documents/HPI/HPI_PO_us_and_census.txt", delim = "\t")
install.packages("bigtabulate")
# Load the bigtabulate package
library(bigtabulate)
# Call bigtable to create a variable called race_table
race_table <- bigtable(mort, "borrower_race")
# Rename the elements of race_table
names(race_table) <- race_cat
race_table
foldable_range <- function(x) {
if (is.list(x)) {
# If x is a list then reduce it by the min and max of each element in the list
c(Reduce(min, x), Reduce(max, x))
} else {
# Otherwise, assume it's a vector and find it's range
range(x)
}
}
# Verify that foldable_range() works on the record_number column
foldable_range(mort[, "record_number"])
install.packages("iotools")
library(iotools)
library(microbenchmark)
microbenchmark(
# Time the reading of a file using read.delim five times
read.delim("mortgage-sample.csv", header = FALSE, sep = ","),
# Time the reading of a file using read.delim.raw five times
read.delim.raw("mortgage-sample.csv", header = FALSE, sep = ","),
times = 5
)
rydfl <- gather(rydf, Year, Count, -Race)
# Create a new adjusted count variable
rydfl$Adjusted_Count <- rydfl$Count / pop_proportion[rydfl$Race]
# Plot
ggplot(rydfl, aes(x = Year, y = Adjusted_Count, group = Race, color = Race)) +
geom_line()
library(ggmap)
corvallis <- c(lon = -123.329773, lat = 48.407326)
victoria <- c(lon = -123.329773, lat = 48.407326)
map_5 <- get_map(victoria, zoom = 5, scale = 1)
?register_google
showing_key()
ggmap_show_api_key()
google_key()
map_5 <- get_map(victoria, zoom = 5, scale = 1)
# Plot map at zoom level 5
ggmap(map_5)
# Get map at zoom level 13: corvallis_map
victoria_map <- get_map(victoria, zoom = 13, scale = 1)
# Plot map at zoom level 13
ggmap(victoria)
get_map(victoria)
# Look at head() of sales
head(sales)
ggmap(victoria_map) +
geom_point(aes(lon, lat, color = year_built), data = sales)
ggmap(victoria_map) +
geom_point(
aes(lon, lat, color = price / finished_squarefeet),
data = sales
)
victoria_map <- get_map(victoria, zoom = 13,
maptype = "terrain",
source = "google")
?get_map
# Load the ggplot2 package
library(ggplot2)
# Explore the mtcars data frame with str()
str(mtcars)
# Execute the following command
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
# Change the command below so that cyl is treated as factor
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_point()
# Change the command below so that cyl is treated as factor
# You'll have to explicitly tell ggplot2 that cyl is a categorical variable.
ggplot(mtcars, aes(x = factor(cyl), y = mpg)) +
geom_point()
--------------------------------------
# Common types of spatial data
ggplot(ward_sales, aes(lon, lat)) +
geom_point(aes(color = ward))
# A scatter plot has been made for you
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
# Replace ___ with the correct column
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
# Replace ___ with the correct column
ggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, color = disp)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, size = disp)) +
geom_point()
# Explore the diamonds data frame with str()
str(diamonds)
ggplot(diamonds, aes(x = carat, y = price))  +
geom_point()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(x = carat, y = price, color = clarity)) +
geom_point(alpha = 0.4)
ggplot(mtcars, aes(x = mpg, y = cyl)) +
geom_point()
ggplot(mtcars, aes(x = cyl, y = mpg)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point(shape = 1, size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 1, size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 21, size = 4, alpha = 0.6)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl, col = am)) +
geom_point(shape = 21, size = 4, alpha = 0.6)
# Map cyl to size
ggplot(mtcars, aes(x = wt, y = mpg, size = cyl)) +
geom_point()
# Map cyl to alpha
ggplot(mtcars, aes(x = wt, y = mpg, alpha = cyl)) +
geom_point()
# Map cyl to shape
ggplot(mtcars, aes(x = wt, y = mpg, shape = cyl)) +
geom_point()
# Map cyl to labels
ggplot(mtcars, aes(x = wt, y = mpg, label = cyl)) +
geom_text()
ggplot(mtcars, aes(x = wt, y = mpg, alpha = cyl)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = cyl, shape = mpg)) +
geom_point()
# Define a hexadecimal color
my_color <- "#4ABEFF"
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point()
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point(color = my_color)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(size = 10, shape = 23, color = my_color)
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(shape = 24, color = 'yellow')
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_text(label = rownames(mtcars), color = 'red')
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl))) +
geom_point()
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am))) +
geom_point()
ggplot(mtcars, aes(x = mpg, y = qsec, col = factor(cyl), shape = factor(am), size = (hp/wt))) +
geom_point()
cyl.am +
geom_bar()
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am +
geom_bar()
cyl.am +
geom_bar(position = "fill")
cyl.am +
geom_bar(position = "dodge")
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
geom_bar(position = "dodge") +
scale_x_discrete("Cylinders") +
scale_y_continuous("Number") +
scale_fill_manual("Transmission",
values = val,
labels = lab)
ggplot(mtcars, aes(x = mpg, y = 0)) +
geom_jitter()
ggplot(mtcars, aes(x = mpg, y = 0)) +
geom_jitter() +
scale_y_continuous(limits = c(-2,2))
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point(size = 4)
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point(size = 4, shape = 1)
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point(size = 4, alpha = 0.6)
ggplot(mtcars, aes(x = wt, y = mpg, color = cyl)) +
geom_point(size = 4, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_point()
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_jitter()
ggplot(mtcars, aes(x = cyl, y = wt)) +
geom_point(position = position_jitter(0.1))
ggplot(Vocab, aes(x = education, y = vocabulary)) +
geom_jitter(shape = 1)
Vocab
# Examine the structure of Vocab
str(mtcars)
# Examine the structure of Vocab
str(iris)
ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
# Use geom_jitter() instead of geom_point()
ggplot(Vocab, aes(x = Petal.Width, y = Petal.Length)) +
geom_jitter()
# Use geom_jitter() instead of geom_point()
ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_jitter()
# Using the above plotting command, set the shape to 1
ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_jitter(shape = 1)
ggplot(mtcars, aes(mpg)) +
geom_histogram()
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
# 3 - Plot 2, plus MAP ..density.. to the y aesthetic (i.e. in a second aes() function)
ggplot(mtcars, aes(mpg)) +
geom_histogram(aes(y = ..density..), binwidth = 1, fill = "#377EB8")
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar()
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "stack")
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar(position = "fill") +
scale_fill_brewer()
scale_fill_brewer()
ggplot(mtcars, aes(x = Petal.Width, fill = Petal.Length)) +
geom_bar(position = "fill") +
scale_fill_brewer()
ggplot(mtcars, aes(x = Petal.Width, fill = Petal.Length)) +
geom_bar(position = "fill") +
scale_fill_brewer()
ggplot(iris, aes(x = Petal.Width, fill = Petal.Length)) +
geom_bar(position = "fill") +
scale_fill_brewer()
ggplot(iris, aes(x = Petal.Width, fill = Petal.Length)) +
geom_bar(position = "fill") +
scale_fill_brewer()
Vocab_url <- "https://vincentarelbundock.github.io/Rdatasets/csv/carData/Vocab.csv"
Vocab <- read_csv(Vocab_url)
Vocab <- readr::read_csv(Vocab_url)
View(Vocab)
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
blues <- brewer.pal(9, "Blues")
blue_range <- colorRampPalette(blues)
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
Vocab <- Vocab[,-1]
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
new_col <- colorRampPalette(c("#FFFFFF", "#0000FF"))
new_col(4) # the newly extrapolated colours
munsell::plot_hex(new_col(4)) # Quick and dirty plot
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
blue_range <- colorRampPalette(blues)
blues <- brewer.pal(9, "Blues")
# Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
colorRampPalette()
# color palette
library(RColorBrewer)
blues <- brewer.pal(9, "Blues")
# Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues")
# Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
new_col <- colorRampPalette(c("#FFFFFF", "#0000FF"))
new_col(4) # the newly extrapolated colours
munsell::plot_hex(new_col(4)) # Quick and dirty plot
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Definition of a set of blue colors
blues <- brewer.pal(9, "Blues")
# Make a color range using colorRampPalette() and the set of blues
blue_range <- colorRampPalette(blues)
# Use blue_range to adjust the color of the bars, use scale_fill_manual()
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
Vocab <- readr::read_csv(Vocab_url)
str(Vocab)
ggplot(Vocab, aes(x = factor(education), fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_manual(values = blue_range(11))
ggplot(Vocab, aes(x = factor(education), fill = factor(vocabulary))) +
geom_bar(position = "fill") +
scale_fill_brewer()
ggplot(mtcars, aes(mpg)) +
geom_histogram(binwidth = 1)
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
# 5 - Plot 4, plus change position = "identity" and alpha = 0.4
ggplot(mtcars, aes(mpg, fill = am)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
# 4 - Plot 3, change position = "fill"
ggplot(mtcars, aes(mpg, fill = am)) +
geom_histogram(binwidth = 1, position = "fill")
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity", alpha = 0.4)
head(economics)
ggplot(economics, aes(x = date, y = unemploy)) +
geom_line()
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = recess,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
head(recess)
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = iris,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = economics,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_rect(data = economics,
aes(xmin = date, xmax = date, ymin = -Inf, ymax = +Inf),
inherit.aes = FALSE, fill = "red", alpha = 0.2) +
geom_line()
str(fish.species)
plot(mpg ~ wt, data = mtcars) # formula notation
with(mtcars, plot(wt, mpg)) # x, y notation
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_point()
qplot(wt, mpg, data = mtcars)
qplot(wt, mpg, data = mtcars)
qplot(wt, mpg, data = mtcars, size = factor(cyl))
qplot(wt, mpg, data = mtcars, color = qsec)
qplot(factor(cyl), factor(vs), data = mtcars, geom = "jitter")
head(ChickWeight)
ggplot(ChickWeight, aes(x = Time, y = weight)) +
geom_line(aes(group = Chick))
ggplot(ChickWeight, aes(x = Time, y = weight, color = Diet)) +
geom_line(aes(group = Chick))
ggplot(ChickWeight, aes(x = Time, y = weight, color = Diet)) +
geom_line(aes(group = Chick), alpha = 0.3) +
geom_smooth(lwd = 2, se = FALSE)
ggplot(titanic, aes(x = Pclass, fill = Sex)) +
geom_bar(position = "dodge")
# titanic is avaliable in your workspace
# 1 - Check the structure of titanic
str(titanic)
Titanic
# titanic is avaliable in your workspace
# 1 - Check the structure of titanic
str(Titanic)
# 5 - Plot 3, but use the position object from instruction 4
ggplot(Titanic, aes(x = Pclass, y = Age, color = Sex)) +
geom_point(size = 3, alpha = 0.5, position = posn.jd) +
facet_grid(. ~ Survived)
str(Titanic)
# 2 - Use ggplot() for the first instruction
ggplot(Titanic, aes(x = Pclass, fill = Sex)) +
geom_bar(position = "dodge")
Titanic <- as.data.frame(Titanic)
# 2 - Use ggplot() for the first instruction
ggplot(Titanic, aes(x = Pclass, fill = Sex)) +
geom_bar(position = "dodge")
# titanic is avaliable in your workspace
# 1 - Check the structure of titanic
str(Titanic)
Titanic
ggplot(Titanic, aes(x = Class, fill = Sex)) +
geom_bar(position = "dodge")
ggplot(Titanic, aes(x = Class, fill = Sex)) +
geom_bar(position = "dodge") +
facet_grid(. ~ Survived)
posn.jd <- position_jitterdodge(0.5, 0, 0.6)
ggplot(Titanic, aes(x = Class, y = Age, color = Sex)) +
geom_point(size = 3, alpha = 0.5, position = posn.jd) +
facet_grid(. ~ Survived)
# Introducing sp objects (special objects for working with geospatial data)
library(sp)
# Print countries_sp
countries_sp
ggmap(victoria_map) +
geom_point(aes(lon, lat, color = year_built), data = sales)
ggplot(ward_sales, aes(lon, lat)) +
geom_point(aes(color = ward))
ward_sales
ggmap(victoria_map_sat, base_layer = ggplot(sales, aes(lon, lat))) +
geom_point(aes(color = class)) +
facet_wrap(~ class)
# Plot house sales using qmplot()
qmplot(lon, lat, data = sales, geom = "point", color = bedrooms) +
facet_wrap(~ month)
display.brewer.all()
