hflights_dates  <- hflights  %>%
mutate(date = make_date(year = Year, month = Month, day = DayofMonth))
ggplot(hflights_dates, aes(x = date, y = DepDelay)) +
geom_line()
?hflights
?ymd_hms
hflights_parse <- hflights  %>%
mutate(
DepDelay_string = paste(DepDelay, sep = "T"),
Delaytime = ymd_hms(DepDelay_string)
)
# Examine the head() of hflights
head(hflights)
# Examine the head() of the months of release_time
head(month(Month))
# Examine the head() of the months of release_time
head(month(hflights))
month(hflights$Month) %>% table()
# Extract the year of hflights
year(hflights) %>% table()
# Examine the head() of hflights
head(hflights)
year(hflights$Year %>% table()
# Extract the year of hflights
year(hflights$Year) %>% table()
# Extract the year of hflights
year(hflights$Year) %>% table()
# Extract the month of hflights
month(hflights$Month) %>% table()
# Extract the year of hflights
year(hflights$Year) %>% table()
# How often is the hour before 12 (noon)?
mean(hour(hflights$DepTime) < 12)
# How often is the release in am?
mean(am(hflights$DepTime))
mean(as.POSIXct(hflights$DepTime) < 12)
as.POSIXct(hflights$DepTime
s.POSIXct(hflights$DepTime)
as.POSIXct(hflights$DepTime)
as_date(hflights, origin = lubridate::origin)
as_date(x, origin = lubridate::origin)
mean(as.POSIXct(hflights$DepTime) < 12)
mean(as.POSIXct(hflights$DepTime, origin="1991-01-01"))) < 12)
mean(as.POSIXct(hflights$DepTime, origin="1991-01-01")) < 12)
mean(as.POSIXct(hflights$DepTime, origin="1991-01-01") < 12)
mean(as.POSIXct(hflights$DepTime, origin="1991-01-01"))
# Use wday() to tabulate release by day of the week
wday(hflights$DepTime) %>% table()
wday(hflights$DepTime, label = TRUE) %>% table()
hflights$wday <- wday(hflights$DepTime, label = TRUE)
ggplot(hflights, aes(wday)) +
geom_bar() +
facet_wrap(~ DepTime, ncol = 1, scale = "free_y")
r_3_4_1 <- ymd_hms("2016-05-03 07:13:28 UTC")
# Round down to day
floor_date(r_3_4_1, unit = "day")
# Round to nearest 5 minutes
round_date(r_3_4_1, unit = "5 minutes")
# Round up to week
ceiling_date(r_3_4_1, unit = "week")
# Subtract r_3_4_1 rounded down to day
r_3_4_1 - floor_date(r_3_4_1, unit = "day")
head(hflights)
# Create day_hour, datetime rounded down to hour
hflights_hourly <- hflights %>%
mutate(
dep_hour = floor_date(DepTime, unit = "hour")
)
hflights %>%
count(DepTime)
hflights %>%
count(DepTime) %>%
filter(n != 2) %>%
arrange(desc(n))
hflights_hourly <- hflights %>%
mutate(
dep_hour = floor_date(DepTime, unit = "hour")
)
hflights_hourly <- hflights %>%
mutate(
dep_hour = floor_date(DepTime, unit = "hour")
)
date_landing <- mdy("July 20, 1969")
moment_step <- mdy_hms("July 20, 1969, 02:56:15", tz = "UTC")
# How many days since the first man on the moon?
difftime(today(), date_landing, units = "days")
# How many seconds since the first man on the moon?
difftime(now(), moment_step, units = "secs")
today()
now()
mar_11 <- ymd_hms("2017-03-11 12:00:00",
tz = "America/Los_Angeles")
mar_12 <- ymd_hms("2017-03-12 12:00:00",
tz = "America/Los_Angeles")
mar_13 <- ymd_hms("2017-03-13 12:00:00",
tz = "America/Los_Angeles")
# Difference between mar_13 and mar_12 in seconds
difftime(mar_13, mar_12, units = "secs")
# Difference between mar_12 and mar_11 in seconds
difftime(mar_12, mar_11, units = "secs")
mon_2pm <- dmy_hm("27 Aug 2018 14:00")
mon_2pm + weeks(1)
tue_9am <- dmy_hm("28 Aug 2018 9:00")
tue_9am + hours(81)
# Subtract a period of five years from today()
today() - years(5)
# Subtract a duration of five years from today()
today() - dyears(5)
# A sequence of 1 to 12 periods of 1 month
month_seq <- 1:12 * months(1)
# Add 1 to 12 months to jan_31
jan_31 + month_seq
# Replace + with %m+%
jan_31 %m+% month_seq
# Replace + with %m-%
jan_31 %m-% month_seq
install.packages(c("bcmaps", "data.tree", "haven", "maptools", "MASS", "purrr", "readr"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Sys.timezone()
game2 <- mdy_hm("June 11 2015 19:00")
# Game3: CHN vs NZL in Winnipeg
game3 <- mdy_hm("June 15 2015 18:30")
# Set the timezone to "America/Edmonton"
game2_local <- force_tz(game2, tzone = "America/Edmonton")
game2_local
# Set the timezone to "America/Winnipeg"
game3_local <- force_tz(game3, tzone = "America/Winnipeg")
game3_local
# How long does the team have to rest?
as.period(game2_local %--% game3_local)
head(hflights)
# Examine datetime and date_utc in library(hflights)
head(hflights$Month)
head(hflights$DayofMonth)
hflights_hourly <- hflights %>%
mutate(
DepTimeNew = force_tz(DepTime, tzone = "Pacific/Auckland"))
# Are datetime and date_utc the same moments
table(hflights$DepTime - hflights$ArrTime)
head(hflights$DepTime)
head(hflights$ArrTime)
# Are DepTime and ArrTime the same moments
table(hflights$DepTime - hflights$ArrTime)
tibble::glimpse(hflights_hourly)
hflights_hourly <- hflights %>%
mutate(
DepTimeNew = force_tz(DepTime, tzone = "Pacific/Auckland"))
head(hflights)
ggplot(hflights, aes(x = DepTime, y = ArrTime)) +
geom_line(aes(group = make_date(Year, Month, DayofMonth)), alpha = 0.2)
library(microbenchmark)
library(fasttime)
# Examine structure of dates
str(dates)
fastPOSIXct(dates) %>% str()
# Compare speed of fastPOSIXct() to ymd_hms()
microbenchmark(
ymd_hms = ymd_hms(dates),
fasttime = fastPOSIXct(dates),
times = 20)
library(microbenchmark)
library(fasttime)
# Examine structure of dates
str(dates)
# Use fastPOSIXct() to parse dates
fastPOSIXct(dates) %>% str()
# Compare speed of fastPOSIXct() to ymd_hms()
microbenchmark(
ymd_hms = ymd_hms(dates),
fasttime = fastPOSIXct(dates),
times = 20)
install.packages("fasttime")
install.packages("microbenchmark")
library(microbenchmark)
library(fasttime)
# Examine structure of dates
str(dates)
# Use fastPOSIXct() to parse dates
fastPOSIXct(dates) %>% str()
# Compare speed of fastPOSIXct() to ymd_hms()
microbenchmark(
ymd_hms = ymd_hms(dates),
fasttime = fastPOSIXct(dates),
times = 20)
?microbenchmark
# Examine structure of dates
str(dates)
fastPOSIXct(hflights$Year) %>% str()
# Examine structure of dates
str(hflights_dates)
# Use fastPOSIXct() to parse dates
fastPOSIXct(hflights_dates) %>% str()
microbenchmark(
ymd_hms = ymd_hms(hflights_dates),
fasttime = fastPOSIXct(hflights_dates),
times = 20)
# Head of dates
head(hflights_dates$date)
fast_strptime(hflights_dates$date,
format = "%Y-%m-%dT%H:%M:%SZ") %>% str()
microbenchmark(
ymd_hms = ymd_hms(hflights_dates),
fasttime = fastPOSIXct(hflights_dates),
times = 20)
# Outputting pretty dates and times
# Create a stamp based on "Sep 20 2017"
date_stamp <- stamp("Sep 20 2017")
# Print date_stamp
date_stamp
# Call date_stamp on today
date_stamp(today())
# Create and call a stamp based on "09/20/2017"
stamp("09/20/2017")(today())
# Use string finished for stamp()
stamp(finished)(today())
# Create and call a stamp based on "09/20/2017"
stamp("09/20/2017")(today())
# Use string finished for stamp()
stamp(finished)(today())
date_stamp <- stamp("Sep 20 2017")
# Print date_stamp
date_stamp
# Call date_stamp on today
date_stamp(today())
# Create and call a stamp based on "09/20/2017"
stamp("09/20/2017")(today())
with_tz(game3_local, tzone = "Pacific/Auckland")
mdy_hm()
# load dependencies and libraries
library(ggplot2)
## check lubridate functions for fun :)
today()
april_10_2019 <- as.Date("2019-04-10")
r_3_4_1 <- ymd_hms("2016-05-03 07:13:28 UTC")
floor_date(r_3_4_1, unit = "day")
# Round to nearest 5 minutes
round_date(r_3_4_1, unit = "5 minutes")
# Round up to week
ceiling_date(r_3_4_1, unit = "week")
# Round up to week
ceiling_date(r_3_4_1, unit = "week")
# Subtract r_3_4_1 rounded down to day
r_3_4_1 - floor_date(r_3_4_1, unit = "day")
head(hflights$DepTime)
head(hflights$ArrTime)
hflights_hourly <- hflights %>%
mutate(
DepTimeNew = force_tz(DepTime, tzone = "Pacific/Auckland"))
table(hflights$DepTime - hflights$ArrTime)
# Examine structure of time column
str(hflights$DepTime)
str(hflights$ArrTime)
ggplot(hflights, aes(x = DepTime, y = ArrTime)) +
geom_line(aes(group = make_date(Year, Month, DayofMonth)), alpha = 0.2)
# Are DepTime and ArrTime the same moments
table(hflights$DepTime - hflights$ArrTime)
tibble::glimpse(hflights)
hflights_hourly <- hflights %>%
mutate(
Dep = make_date(Year, Month, DayofMonth),
newDep = force_tz(DepTime, tzone = "Pacific/Auckland"))
hflights_hourly <- hflights %>%
mutate(
Dep = make_date(Year, Month, DayofMonth),
newDep = force_tz(Dep, tzone = "Pacific/Auckland"))
ggplot(hflights_hourly, aes(x = Dep, y = newDep))
ggplot(hflights_hourly)
hflights_hourly$newDep - hflights$DepTime
hflights_hourly$newDep - hflights$DepTime
diff <- hflights_hourly$newDep - hflights$DepTime
diff
hflights_hourly$newDep == hflights$DepTime
mean(as.POSIXct(hflights$DepTime, origin="1991-01-01"))
year(hflights$Year) %>% table()
# Use string finished for stamp()
stamp(finished)(today())
# Use string finished for stamp()
stamp((finished)(today()))
?stamp
# Outputting pretty dates and times
# Create a stamp based on April 10 2019"
date_stamp <- stamp("April 10 2019")
# Outputting pretty dates and times
# Create a stamp based on April 10 2019"
date_stamp <- stamp("April 10 2019")
# Outputting pretty dates and times
# Create a stamp based on April 10 2019"
date_stamp <- stamp("Apr 10 2019")
# Outputting pretty dates and times
# Create a stamp based on April 10 2019"
date_stamp <- stamp("April, 10 2019")
hflights_hourly$newDep == hflights$DepTime
head(hflights)
halleys <- hflights %>%
mutate(
start_date = make_datetime(Year, Month, DayofMonth, DepTime),
end_date =  make_datetime(Year, Month, DayofMonth, ArrTime),
visible = start_date %--% end_date)
hflights_intervals <- hflights %>%
mutate(
start_date = make_datetime(Year, Month, DayofMonth, DepTime),
end_date =  make_datetime(Year, Month, DayofMonth, ArrTime),
visible = start_date %--% end_date)
head(hflights_intervals)
# The visible of 1066
visible <- visible[14, ]
visible <- visible[14, ]
visible <- hflights_intervals$visible[14, ]
hflights_intervals$visible[14, ]
hflights_intervals %>%
filter(hflights_intervals$visible %within% hflights_intervals) %>%
select(Year, Month, DayofMonth, ArrTime)
hflights_intervals %>%
filter(hflights_intervals$start_date %within% hflights_intervals$end_date) %>%
select(Year, Month, DayofMonth, ArrTime)
hflights_intervals %>%
filter(int_overlaps(hflights_intervals$start_date, hflights_intervals) %>%
select(Year, Month, DayofMonth, ArrTime)
hflights_intervals %>%
filter(int_overlaps(hflights_intervals$start_date, hflights_intervals)) %>%
select(Year, Month, DayofMonth, ArrTime)
hflights_intervals %>%
filter(int_overlaps(hflights_intervals$start_date, hflights_intervals)) %>%
select(Year, Month, DayofMonth, ArrTime)
hflights_intervals %>%
filter(int_overlaps(hflights_intervals$start_date, hflights_intervals$end_date)) %>%
select(Year, Month, DayofMonth, ArrTime)
# Create an interval for flights
monarchs <- hflights_intervals %>%
mutate(ints = start_date %--% end_date)
View(monarchs)
flights %>%
mutate(length = int_length(start_date)) %>%
arrange(desc(length))
flights <- hflights_intervals %>%
mutate(ints = start_date %--% end_date)
flights %>%
mutate(length = int_length(start_date)) %>%
arrange(desc(length))
# Find the length of flights, and arrange
flights %>%
mutate(length = int_length(hflights_intervals$start_date)) %>%
arrange(desc(length))
fly <- flights %>%
mutate(
duration = as.duration(hflights_intervals$start_date),
period = as.period(hflights_intervals$start_date))
hflights$wday <- wday(hflights$DepTime, label = TRUE)
ggplot(hflights, aes(wday)) +
geom_bar() +
facet_wrap(~ DepTime, ncol = 1, scale = "free_y")
date_stamp <- stamp("April, 10 2019")
# Outputting pretty dates and times
# Create a stamp based on April 10 2019"
date_stamp <- stamp(ymd("April, 10 2019"))
# Outputting pretty dates and times
# Create a stamp based on April 10 2019"
date_stamp <- stamp(ymd("2010-04-05"))
date_stamp <- stamp("Sep 20 2017")
date_stamp <- stamp("April 10 2019")
# Print date_stamp
date_stamp
# Call date_stamp on today
date_stamp(today())
stamp("09/20/2017")(today())
# Use string finished for stamp()
stamp((finished)(today()))
library(fasttime)
library(microbenchmark)
# The arguments to microbenchmark() are just R expressions that you want to time.
# Make sure you match up the names of these arguments to the parsing functions.
# Examine structure of dates
str(hflights_dates)
# Use fastPOSIXct() to parse dates
fastPOSIXct(hflights_dates$date) %>% str()
microbenchmark(
ymd_hms = ymd_hms(hflights_dates),
fasttime = fastPOSIXct(hflights_dates),
times = 20)
# Specify breaks every ten years and labels with "%Y"
ggplot(hflights, aes(x = Year, y = Month)) +
geom_line(aes(group = 1, color = factor(DayofMonth)))  +
scale_x_date(date_breaks = "10 years", date_labels = "%Y")
date_stamp <- stamp("April 10 2019")
# Print date_stamp
date_stamp
# Call date_stamp on today
date_stamp(today())
# Create and call a stamp based on "09/20/2017"
stamp("09/20/2017")(today())
stamp(today())
stamp("Jan 01")(D)
D <- ymd("2010-04-05") - days(1:5)
stamp("March 1, 1999")(D)
date_stamp <- stamp("Created today")(D)
date_stamp <- stamp("Created on Wednesday")(D)
date_stamp <- stamp("Created on Sunday, Jan 1, 1999 3:34 pm")(D)
date_stamp(D)
stamp("Created on Sunday, Jan 1, 1999 3:34 pm")(D)
stamp("Created on Sunday, Jan 1, 1999 3:34 pm")(D)
stamp("Created on Sunday, 3:34 pm")(D)
stamp("Created on Sunday, 3:34 pm")
stamp("Created on Sunday, 3:34 pm")(D)
stamp("Created on Sunday, Jan 1, 1999 3:34 pm")(D)
D <- ymd("2019-04-04") - days(1:5)
stamp("Created on Sunday, Jan 1, 1999 3:34 pm")(D)
# Print date_stamp
date_stamp
# Print date_stamp
date_stamp
# Call date_stamp on today
date_stamp(today())
date_stamp
# Create and call a stamp based on "09/20/2017"
stamp(today())
ggplot(hflights, aes(x = Year, y = Month)) +
geom_line(aes(group = 1, color = factor(DayofMonth)))  +
scale_x_date(date_breaks = "10 years", date_labels = "%Y")
ggplot(hflights, aes(x = Year, y = Month)) +
geom_line(aes(group = 1, color = factor(DayofMonth))) +
xlim(as.Date("2010-01-01"), as.Date("2014-01-01"))
ggplot(hflights, aes(x = Year, y = Month)) +
geom_line(aes(group = 1, color = factor(DayofMonth)))
ggplot(hflights, aes(x = Year, y = DayofMonth)) +
geom_line(aes(group = 1, color = factor(Month)))
hflights_parse <- hflights  %>%
mutate(
DepDelay_string = paste(DepDelay, sep = "T"),
Delaytime = ymd_hms(DepDelay_string)
)
hflights_dates  <- hflights  %>%
mutate(date = make_date(year = Year, month = Month, day = DayofMonth))
# Plot to check work
ggplot(hflights_dates, aes(x = date, y = DepDelay)) +
geom_line()
# Parse datetime_string
hflights_parse <- hflights  %>%
mutate(
DepDelay_string = paste(DepDelay, sep = "T"),
Delaytime = ymd_hms(DepDelay_string)
)
ggplot(hflights_dates, aes(x = date, y = DepDelay)) +
geom_line()
hflights_parse <- hflights  %>%
mutate(
DepDelay_string = paste(DepDelay, sep = "T"),
Delaytime = ymd_hms(DepDelay_string)
)
hflights_parse <- hflights  %>%
mutate(
Delaytime = ymd_hms(DepDelay))
hflights  %>%
mutate(
Delaytime = ymd_hms(DepDelay))
hflights_parse <- hflights_dates  %>%
mutate(
Delaytime = ymd_hms(date))
hflights_dates  %>%
mutate(
Delaytime = ymd_hms(date))
hflights_dates  <- hflights  %>%
mutate(date = make_date(year = Year, month = Month, day = DayofMonth))
hflights_dates  %>%
mutate(
Delaytime = ymd_hms(date))
hflights_parse <- hflights_dates  %>%
mutate(
Delaytime = ymd(date))
hflights_parse
hflights_parse <- hflights_dates  %>%
mutate(
Delaytime = dmy(date))
hflights_dates  %>%
mutate(
Delaytime = dmy(date))
short_dates <- c("11 December 1282", "May 1372", "1253")
parse_date_time(short_dates, orders = c("dOmY", "OmY", "Y"))
install.packages(c("usethis", "visNetwork", "xfun", "XML", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("stringi", "stringr", "styler", "survival", "testthat", "tinytex", "units"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("xfun")
install.packages(c("assertthat", "babynames", "backports", "BH", "broom"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("assertthat", "babynames", "backports", "BH", "broom"), lib = "/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("processx", "R6", "Rcpp", "Rglpk", "rlang"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("callr", "classInt", "cli", "clipr", "colorspace", "curl"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("dbplyr", "devtools", "digest", "e1071", "evaluate", "spData"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("fansi", "forcats", "ggplot2", "git2r", "glue"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("RcppArmadillo")
install.packages(c("gtable", "highr", "htmlwidgets", "httr", "igraph"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("Matrix", "mgcv", "mime", "modelr", "openssl", "pillar"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("pkgconfig", "rstudioapi", "scales", "sdcTable", "slam"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages(c("lazyeval", "lobstr", "Matrix", "mgcv", "pkgbuild"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("RcppArmadillo")
install.packages(c("jsonlite", "Matrix", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("RcppArmadillo")
install.packages(c("Matrix", "mgcv"), lib="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
head(hflights_dates)
hflights_hourly <- hflights_dates %>%
mutate(
years = year(date),
months = month(date, label = TRUE)
)
akl_day <- hflights_hourly %>%
filter(months >= 8, months <= 22)
ggplot(hflights_daily, aes(x = AirTime, y = month, height = ..density..)) +
geom_density_ridges(stat = "density")
microbenchmark(
ymd_hms = ymd_hms(hflights_dates$date),
fasttime = fastPOSIXct(hflights_dates$date),
fast_strptime = fast_strptime(hflights_dates$date,
format = "%Y-%m-%dT%H:%M:%SZ"),
times = 20)
