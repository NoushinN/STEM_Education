#Install and load networkD3 package
install.packages("networkD3")
library(networkD3)
install.packages("networkD3")
from <- c("Gene1","Gene1", "Gene3","Gene4","Gene5", "Gene6")
to <-   c("Protein1","Protein2","Protein3", "Protein4", "Protein5","Protein6")
gene.net <- data.frame(from, to)
#Check Edge List
View(gene.net)
#Plot Simple Network from Edge List - interactive html widget
simpleNetwork(gene.net)
#Customise widget
simpleNetwork(gene.net,
fontSize = 25,
nodeColour = "#3182bd",
fontFamily = "sans-serif",
zoom = TRUE)
nodes <- read.csv(file.choose(), sep = ",", header = TRUE)
links <- read.csv(file.choose(), sep = ",", header = TRUE)
forceNetwork(Nodes = nodes, Links = links,
NodeID = "name", Group = "group",
Source = "from", Target = "to", Value = "weight")
forceNetwork(Nodes = nodes, Links = links,
NodeID = "name", Group = "group",
Source = "from", Target = "to", Value = "weight",
legend = TRUE,
fontSize = 50,
opacity = 1,
charge = -500,
zoom = TRUE)
#Install and load networkD3 package
#install.packages("networkD3")
library(networkD3)
from <- c("Gene1","Gene1", "Gene3","Gene4","Gene5", "Gene6")
to <-   c("Protein1","Protein2","Protein3", "Protein4", "Protein5","Protein6")
gene.net <- data.frame(from, to)
View(gene.net)
simpleNetwork(gene.net,
fontSize = 25,
nodeColour = "#3182bd",
fontFamily = "sans-serif",
zoom = TRUE)
knitr::opts_chunk$set(echo = TRUE)
## (iii) Creating R Objects
object <- 3 + 5
#Call object
object
data()
## Some of the more popular data sets used in online demos & tutorials are:
data("iris")
summary()
summary(iris)
City <-  c("Paris", "London", "New York", "Shanghai", "Victoria", "Vancouver", "Toronto")
Popularity <- c(20, 25, 22, 15, 5, 10, 20)
geodata <- data.frame(City, Popularity)
View(geodata)
class(geodata)
install.packages("googleVis")
library(googleVis)
suppressPackageStartupMessages(library(googleVis))
args(gvisGeoChart)
geochart <- gvisGeoChart(geodata,
locationvar = "City",
colorvar = "Popularity")
plot(geochart)
plot(geochart)
Country <-    c("United Kingdom", "France", "Spain", "Germany", "US", "Australia", "Thailand" )
Popularity <- c(20, 25, 22, 15, 5, 5, 5)
geodata <- data.frame(Country, Popularity)
geochart <- gvisGeoChart(geodata,
locationvar = "Country",
colorvar = "Popularity")
plot(geochart)
Country <-  c("France", "Argentina", "USA", "China", "Russia", "Canada", "Romania")
Popularity <- c(20, 25, 22, 15, 5, 10, 20)
geodata <- data.frame(Country, Popularity)
View(geodata)
class(geodata)
geochart <- gvisGeoChart(geodata,
locationvar = "Country",
colorvar = "Popularity")
plot(geochart)
data("economics", "diamonds")
library(ggplot2)
data("economics", "diamonds")
View(economics)
View(diamonds)
line.graph <- ggplot(data = economics, aes(x = date, y = pop)) + geom_line()
plot(line.graph)
View(economics)
View(diamonds)
bar.chart <- ggplot(data = diamonds, aes(x = cut)) + geom_bar()
plot(bar.chart)
box.plot <- ggplot(data = diamonds, aes(x = cut, y = price)) + geom_boxplot()
plot(box.plot)
scatterplot <- ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point()
plot(scatterplot)
scatterplot <- ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point()
+ geom_line(colour = "tomato")
+ geom_bar(colour = "slategrey", fill = "peachpuff")
+ geom_boxplot(colour = "navy", fill = "oldlace")
scatterplot <- ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point(),
+ geom_line(colour = "tomato")
+ geom_bar(colour = "slategrey", fill = "peachpuff")
+ geom_boxplot(colour = "navy", fill = "oldlace")
ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point(),
+ geom_line(colour = "tomato")
+ geom_bar(colour = "slategrey", fill = "peachpuff")
+ geom_boxplot(colour = "navy", fill = "oldlace")
scatterplot <- ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point(),
geom_line(colour = "tomato"),
geom_bar(colour = "slategrey", fill = "peachpuff"),
geom_boxplot(colour = "navy", fill = "oldlace")
plot(scatterplot)
scatterplot <- ggplot(data = diamonds, aes(x = price, y = carat))
+ geom_point(colour = "tomato")
scatterplot <- ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point(colour = "tomato")
plot(scatterplot)
bar.chart <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(colour = "slategrey", fill = "peachpuff")
plot(bar.chart)
box.plot <- ggplot(data = diamonds, aes(x = cut, y = price)) + geom_boxplot(colour = "navy", fill = "oldlace")
plot(box.plot)
bar.chart.subset <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = clarity))
plot(bar.chart.subset)
scatterplot.subset <- ggplot(data = diamonds, aes(x = price, y = carat)) + geom_point(aes(colour = cut))
plot(scatterplot.subset)
bar.chart.subset <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = clarity))
bar.chart.facet <- ggplot(data = diamonds, aes(x = cut)) + geom_bar(aes(fill = color)) + facet_grid(color~.)
plot(bar.chart.facet)
View(economics)
View(diamonds)
data(mtcars)
mtcars.clean <- mtcars[, -c(8,9)]
medians <- apply(mtcars.clean, 2, median)
mads <- apply(mtcars.clean, 2, mad)
mtcars.standardised <- scale(mtcars.clean, center = medians, scale = mads)
mtcars.stan.dist <- dist(mtcars.standardised, method = "euclidean")
mtcars.clust <- hclust(mtcars.stan.dist, method = "ward.D2")
plot(mtcars.clust, hang = -1)
rect.hclust(mtcars.clust, 6)
medians <- apply(mtcars.clean, 2, median)
mads <- apply(mtcars.clean, 2, mad)
mtcars.standardised <- scale(mtcars.clean, center = medians, scale = mads)
plot(mtcars.clust, hang = -1)
rect.hclust(mtcars.clust, 6)
data(mtcars)
mtcars.clean <- mtcars[, -c(8,9)]
medians <- apply(mtcars.clean, 2, median)
mads <- apply(mtcars.clean, 2, mad)
mtcars.standardised <- scale(mtcars.clean, center = medians, scale = mads)
mtcars.stan.dist <- dist(mtcars.standardised, method = "euclidean")
mtcars.clust <- hclust(mtcars.stan.dist, method = "ward.D2")
plot(mtcars.clust, hang = -1)
rect.hclust(mtcars.clust, 6)
knitr::opts_chunk$set(echo = TRUE)
data(mtcars)
mtcars.clean <- mtcars[, -c(8,9)]
---
#### Extension
#### Try one of the many packages available to created enhanced dendrogram visualisations. Here we'll create coloured leaves:
install.packages("sparcl")
library(sparcl)
View(mtcars)
#### (ii) Clean data
#### Take out the binary variables, "vs" and "am" by removing a vector referencing their specific column positions from the original dataset, i.e. column 8 and 9:
mtcars[,8]
#### (ii) Clean data
#### Take out the binary variables, "vs" and "am" by removing a vector referencing their specific column positions from the original dataset, i.e. column 8 and 9:
mtcars[,9]
#### (ii) Clean data
#### Take out the binary variables, "vs" and "am" by removing a vector referencing their specific column positions from the original dataset, i.e. column 8 and 9:
mtcars[,8:9]
#Eyeball cleaned data
View(mtcars1)
mtcars1 <- mtcars[, -c(8, 9)]
#Eyeball cleaned data
View(mtcars1)
#Calculate the column-wise medians
medians <- apply(mtcars1, 2, median)
#Update the mtcars1 data set by scaling each column by it's median and mad
mtcars2 <- scale(mtcars1, center = medians, scale = mads)
View(mads)
View(mtcars2)
print(mtcars2, digits=2)
#Eyeball normalised data
print(head(mtcars2, n = 5), digits=2)
mtcars3 <- dist(mtcars2, method = "euclidean")
View(mtcars3)
mtcars3 <- dist(mtcars2, method = "euclidean")
View(mtcars3)
mtcars3 <- dist(mtcars2, method = "euclidean")
print(mtcars3, digits=2)
clusters <- hclust(mtcars3, method = "ward.D2")
plot(clusters)
plot(clusters, hang = -1)
rect.hclust(clusters, 6)
clusters.6 <- cutree(clusters, 6)
table(clusters.6)
rect.hclust(clusters, 6)
#### Use `cutree` function to cut the tree into the 6 groups of data (clusters):
clusters.6 <- cutree(clusters, 6)
table(clusters.6)
#### (viii) Charcterise each Cluster by their variable statistics
#### Calculate & Interpret variable stats in their standardised scale:
#### Use aggregate command to compute chosen summary statistics (mean) which is then applied to all subsets (the 6 clusters) of the scaled mtcars data
means.scaled <- aggregate(mtcars2, list(clusters.6), mean)
#### Bring up info, formatted to 2 d.p
options(digits = 2)
options(digits = 2)
means.scaled
#### Calculate & Interpret variable stats in their original scale:
#Use aggregate command to compute chosen summary statistics (mean) which is then applied to all subsets (the 6 clusters) of the un-scaled mtcars data
means.orig <- aggregate(mtcars1, list(clusters.6), mean)
#Bring up info
means.orig
mtcars.membership <- cbind(clusters.6, mtcars1)
mtcars.membership
mtcars.membership[1:6,1:10]
install.packages("sparcl")
install.packages("sparcl")
library(sparcl)
ColorDendrogram(clusters, y = clusters.6, labels = names(clusters.6), branchlength = 5)
ColorDendrogram(clusters, y = clusters.6, labels = names(clusters.6), branchlength = 5)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
m <- lm(dist ~ speed, data = cars)
summary(m)
library("knitr")
kable(summary(m)$coef, digits = 2)
library("trackeR")
library("trackeR")
knitr::opts_chunk$set(echo = TRUE)
library("trackeR")
library(trackeR)
library(trackeR)
install.packages("trackeR")
library(trackeR)
library(trackeR)
knitr::opts_chunk$set(echo = TRUE)
p <- plot(runs, session = 1:10)
## leafletRoute() is included in devel version from github
## install.packages("devtools")
## devtools::install_github("hfrick/trackeR")
leafletRoute(runs, session = 23:24)
devtools::install_github("hfrick/trackeR")
## install.packages("devtools")
## devtools::install_github("hfrick/trackeR")
library("trackeR")
data("runs", package = "trackeR")
p <- plot(runs, session = 1:10)
p
p
## leafletRoute() is included in devel version from github
leafletRoute(runs, session = 23:24)
install.packages("dygraphs")
install.packages("xts")
install.packages("d3heatmaps")
install.packages("threejs")
library(dygraphs)
library(xts)
library(forecast)
library(forecast)
data("wineind")
?wineind
install.packages('forecast', dependencies = TRUE)
library(forecast)
data("wineind")
#### (iii) Explore Data
?wineind
class(wineind)
wineind
plot(wineind) #base R plot
stl_wine <- stl(wineind, s.window = "periodic") #s.window controls variation of seasonal component
stl_wine
plot(stl_wine) #base R plot
random_stl <- ts(stl_wine$time.series[,3], start = c(1980, 1), frequency=12)
random_stl.xts <- as.xts(random_stl)
seasonal_stl <- ts(stl_wine$time.series[,1], start = c(1980, 1), frequency=12)
seasonal_stl.xts <- as.xts(seasonal_stl)
trend_stl <- ts(stl_wine$time.series[,2], start = c(1980, 1), frequency=12)
trend_stl.xts <- as.xts(trend_stl)
seasonal_stl <- ts(stl_wine$time.series[,1], start = c(1980, 1), frequency=12)
seasonal_stl.xts <- as.xts(seasonal_stl)
trend_stl <- ts(stl_wine$time.series[,2], start = c(1980, 1), frequency=12)
trend_stl.xts <- as.xts(trend_stl)
random_stl <- ts(stl_wine$time.series[,3], start = c(1980, 1), frequency=12)
random_stl.xts <- as.xts(random_stl)
wine.plot <- cbind(random_stl.xts, seasonal_stl.xts, trend_stl.xts)
#re-name columns
colnames(wine.plot) <- c("remainder", "seasonal", "trend")
dygraph(wine.plot) %>%
dyOptions(stackedGraph = TRUE)
dygraph(wine.plot, main = "Australian Wine Sales") %>%
dyOptions(stackedGraph = TRUE, colors=RColorBrewer::brewer.pal(3, "Set1"))%>%
dyRangeSelector()
library(d3heatmap)
#### (i) Call d3heatmap library
devtools::install_github("rstudio/d3heatmap")
library(d3heatmap)
burger <- read.csv("burger.csv", header = TRUE, row.names = 1)
setwd("~/STEM_Education/Data Analysis Lessons/4. JAVA WITH R")
setwd("~/STEM_Education/Data Analysis Lessons/4. JAVA WITH R") # the path to your csv file
getwd()
burger <- read.csv("burger.csv", header = TRUE, row.names = 1)
View(burger)
d3heatmap(burger)
library(threejs)
scatterplot3js(burger$proportions, burger$ingredients, burger$patty, flip.y=FALSE) #flip.y to control direction of y-axis
label <- c("proportions", "patty", "ingredients") #define axis labels
scatterplot3js(burger$proportions, burger$ingredients, burger$patty,
axisLabels = label,
labels=row.names(burger),
flip.y = FALSE,
color=rainbow(length(burger$value)),
stroke = NULL,
size=burger$value/5,
renderer = "canvas")
views <- read.csv("globejs.csv", header = TRUE, row.names = 1)
View(views)
globejs(lat = views$Lat, long = views$Long, value = views$PageViews)
traffic <- 10000*views$PageViews/max(views$PageViews)
globejs(lat = views$Lat, long = views$Long, value = traffic,
atmosphere = TRUE,
pointsize = 0.5)
install.packages('forecast', dependencies = TRUE)
library(forecast)
data("wineind")
# Library dependency for this lesson:
library(dplyr)
head(iris)
pairs(iris)
str(iris)
summary(iris)
summary(iris)
pairs(iris)
str(iris)
summary(iris)
#Ex1 Select
select(iris, 1:3)
select(iris, Petal.Width, Petal.Length)
select(iris, contains("Sepal"))
select(iris, starts_with("Sepal"))
select(iris, -Species)
#Ex2 Arrange
arrange(iris, Petal.Width)
arrange(iris, Petal.Width, Petal.Length)
filter(iris, Petal.Width > 1)
filter(iris, Petal.Width > 1 & Species == "versicolor")
filter(iris, Petal.Width > 1, Species == "versicolor") #the comma is a shorthand for &
filter(iris, !Species == "setosa")
# Magrittr Example (Rene Magritte This is not a pipe)
# Ways I would have done before- nesting or multiple variables
data1 <- filter(iris, Petal.Width > 1)
data2 <- select(data1, Species, Petal.Length)
select(
filter(iris, Petal.Width > 1),
Species, Petal.Length)
iris %>%
filter(Petal.Width > 1) %>%
select(Species, Petal.Length)
iris %>%
myFunction(arg1, arg2 = .)
#  myFunction(arg1, arg2 = .)
iris %>%
filter( ., Species == "setosa")
iris %>%
filter(Petal.Width > 1) %>%
select(1:3)
iris %>%
select(contains("Petal")) %>%
arrange(Petal.Width) %>%
head()
iris %>%
filter(Petal.Width > 1) %>%
select(1:3)
head()
iris %>%
filter(Species == "setosa") %>%
arrange(desc(Sepal.Width))
iris %>%
filter(Petal.Width > 1) %>%
View()
iris %>%
filter(Species == "setosa") %>%
select(Petal.Width) %>%
unique()
iris %>%
filter(Species == "setosa") %>%
distinct(Petal.Width)
iris %>%
mutate(pwGreaterThanPL = Petal.Width > Petal.Length) %>%
head()
iris %>%
mutate(pwPlusSL = Petal.Width + Sepal.Length) %>%
head()
iris %>%
mutate(meanSL = mean(Sepal.Length, na.rm = TRUE),
greaterThanMeanSL = ifelse(Sepal.Length > meanSL, 1, 0)) %>%
iris %>%
mutate(meanSL = mean(Sepal.Length, na.rm = TRUE),
greaterThanMeanSL = ifelse(Sepal.Length > meanSL, 1, 0)) %>%
head()
iris %>%
mutate(meanSL = mean(Sepal.Length, na.rm = TRUE),
greaterThanMeanSL = ifelse(Sepal.Length > meanSL, 1, 0)) %>%
head()
iris %>%
mutate(slBuckets = cut(Sepal.Length, 3)) %>%
head()
iris %>%
mutate(pwBuckets = case_when(Petal.Width < 0.2 ~ "Low",
Petal.Width >= 0.2 & Petal.Width < 0.6 ~ "Med",
Petal.Width >= 0.6 ~ "High")) %>%
head()
iris %>%
mutate(meanSL = mean(Sepal.Length, na.rm = TRUE),
greaterThanMeanSL = ifelse(Sepal.Length > meanSL, 1, 0)) %>%
head()
iris %>%
summarise(plMean = mean(Petal.Length),
pwSD = sd(Petal.Width))
iris %>%
group_by(Species) %>%
mutate(slMean = mean(Sepal.Length))
iris %>%
group_by(Species) %>%
summarise(slMean = mean(Sepal.Length))
iris %>%
group_by(Species, Petal.Length) %>%
summarise(count = n())
(test <- iris %>%
group_by(Species) %>%
summarise(slMean = mean(Sepal.Length)))
test <- iris %>%
group_by(Species) %>%
summarise(slMean = mean(Sepal.Length))
iris %>%
rename(PL = Petal.Length) %>%
head()
iris %>%
slice(2:7)
iris %>%
group_by(Species, Petal.Length) %>%
summarise(count = n()) %>%
ungroup()
iris %>%
select(1:4) %>%
summarise_all(mean)
airquality %>%
filter_all(all_vars(is.na(.)))
mutate_at(vars(contains("Petal")), ~ round(.))
airquality %>%
filter_all(any_vars(is.na(.)))
iris %>%
slice(2:7)
iris %>%
mutate_if(is.factor, as.character) %>%
str()
test <- iris %>%
group_by(Species) %>%
summarise(slMean = mean(Sepal.Length))
install.packages("shiny")
install.packages("shiny")
library("shiny")
library("ggplot2")
library(ggplot2)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library("ggplot2")
#Define ui:
ui <- basicPage()
# B. Define server:
server <- function(input, output) {}
# C. Assemble the shinyApp
shinyApp(ui = ui, server =server)
ui <- pageWithSidebar(
titlePanel("This is the title of the panel"),
sidebarPanel("Thhis is the sidebar panel"),
mainPanel("This is the main Panel")
)
server <- function(input, output) {}
shinyApp(ui = ui, server =server)
ui <- fluidPage(
titlePanel("This is the title of the panel"),
sidebarPanel("This is the sidebar panel"),
mainPanel("This is the main Panel")
)
shinyApp(ui = ui, server =server)
ui <- pageWithSidebar(
titlePanel("This is the title of the panel"),
sidebarPanel("This is the sidebar panel"),
mainPanel("This is the main Panel")
)
# assemble the app
server <- function(input, output) {}
shinyApp(ui = ui, server =server)
ui <- fluidPage(
titlePanel("This is the title of the panel"),
sidebarPanel("This is the sidebar panel"),
mainPanel("This is the main Panel")
)
# assemble the app
server <- function(input, output) {}
shinyApp(ui = ui, server =server)
runApp('~/STEM_Education/Data Analysis Lessons/6. SHINYR/SHINYR.R')
runApp('~/STEM_Education/Data Analysis Lessons/6. SHINYR/SHINYR.R')
runApp('~/STEM_Education/Data Analysis Lessons/6. SHINYR/SHINYR.R')
runApp('~/STEM_Education/Data Analysis Lessons/6. SHINYR/SHINYR.R')
runApp('~/STEM_Education/Data Analysis Lessons/6. SHINYR/SHINYR.R')
setwd("~/STEM_Education/Data Analysis Lessons/4. NETWORKD3")
setwd("~/STEM_Education/Data Analysis Lessons/5. JAVA WITH R")
