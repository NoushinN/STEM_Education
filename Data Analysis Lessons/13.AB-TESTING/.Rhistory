# load dependencies
library(tidyverse)
# Read in data
fileLocation <- "http://stat.columbia.edu/~rachel/datasets/nyt1.csv"
click_data <- read.csv(url(fileLocation))
# Find oldest and most recent age
min(click_data$Age)
max(click_data$Age)
library(broom)
# load power analysis library for R
library(powerMediation)
click_data_sum <- click_data %>%
group_by(Signed_In) %>%
summarize(impression_rate = mean(Impressions)/10)
click_data_sum
ggplot(click_data_sum,
aes(x = Signed_In, y = impression_rate)) +
geom_bar(stat = "identity")  # Based on these bar plots the two A conditions look very similar. That's good!
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = Clicks)) +
geom_point(size = 3) +
geom_line(lwd = 1)
click_data_groups <- click_data %>%
group_by(Clicks, Age) %>%
summarize(impression_rate = mean(Impressions))
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = Clicks)) +
geom_point(size = 3) +
geom_line(lwd = 1)
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate)) +
geom_point(size = 3) +
geom_line(lwd = 1)
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1)
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, Age))) +
geom_point(size = 3) +
geom_line(lwd = 1)
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = Age("60")))
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = Age("60"))
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = as.numeric(Age =="60"))
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = Age =="60")
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = as.numeric(as.Date("2018-02-15")))
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = as.numeric(as.Date("2018-02-15"))) +
scale_y_continuous(limits = c(0, 0.3), labels = percent)
# Make plot of conversion rates for clicks
ggplot(click_data_groups,
aes(x = Age,
y = impression_rate,
color = Clicks,
group = interaction(Clicks, impression_rate))) +
geom_point(size = 3) +
geom_line(lwd = 1) +
geom_vline(xintercept = as.numeric(as.Date("2018-02-15")))
install.packages("pwr")
library(pwr)
install.packages("pwr")
install.packages("pwr")
library(pwr)
pwr.t.test(power = 0.8,
sig.level = 0.05,
d = 0.6)  #d = effect size (see more on experimental design)
pwr.t.test(power = 0.8,
sig.level = 0.05,
d = 0.2) #(see more on experimental design)
pwr.t.test(power = 0.8,
sig.level = 0.05,
d = 0.2) #(see more on experimental design)
pwr.t.test(power = 0.8,
sig.level = 0.05,
d = 0.6)  #d = effect size
total_sample_size <- SSizeLogisticBin(p1 = 0.17, # assuming a control value of 17%
p2 = 0.27, # assuming 10% increase in the test condition
B = 0.5,
alpha = 0.05,
power = 0.8)
total_sample_size
click_data
aa_experiment_results <- t.test(Age ~ Impressions, data = click_data)
aa_experiment_results <- t.test(Age ~ Clicks, data = click_data)
aa_experiment_results <- t.test(Gender ~ Clicks, data = click_data)
aa_experiment_results <- t.test(as.factor(Gender) ~ as.factor(Clicks), data = click_data)
aa_experiment_results <- lm(as.factor(Gender) ~ as.factor(Clicks), data = click_data) %>%
summary()
aa_experiment_results <- lm(Gender ~ Clicks, data = click_data) %>%
summary()
aa_experiment_results
# can use a ttest or linear regression for statistical tests
# lm is used when more variables are in data but similar to t-test
lm(Gender ~ Clicks, data = click_data) %>%
summary()
t.test(Gender ~ Clicks, data = click_data) %>%
summary()
t.test(SignedIn ~ Clicks, data = click_data) %>%
summary()
t.test(Signed_In ~ Clicks, data = click_data) %>%
summary()
t.test(Gender ~ Clicks, data = click_data) %>%
summary()
install.packages("gsDesign")
seq_analysis <- gsDesign(k=4,
test.type = 1,
alpha = 0.05,
beta = 0.2, # power = 1-beta so power is 0.8
sfu = "Pocock")
library(gsDesign)
seq_analysis <- gsDesign(k=4,
test.type = 1,
alpha = 0.05,
beta = 0.2, # power = 1-beta so power is 0.8
sfu = "Pocock")
seq_analysis
stopping_points <- max_n_per_group * seq_analysis$timing
max_n <- 1000
max_n_per_group <- max_n / 2
stopping_points <- max_n_per_group * seq_analysis$timing
stopping_points
stopping_points
# Run sequential analysis
seq_analysis_3looks <- gsDesign(k = 3,
test.type = 1,
alpha = 0.05,
beta = 0.2,
sfu = "Pocock")
seq_analysis_3looks
max_n <- 3000
max_n_per_group <- max_n / 2
stopping_points = max_n_per_group * seq_analysis_3looks$timing
stopping_points
library(broom)
multivar_results <- lm(Age ~ Gender * Clicks, data = click_data) %>%
tidy()
multivar_results
multivar_results$p.value
multivar_results$p.value
new_click_data <- click_data %>%
group_by(Age, Gender) %>%
summarize(impression_mean = mean(Impressions))
# Plot summary values for four conditions
ggplot(new_click_data,
aes(x = Age,
y = Gender,
fill = impression_mean)) +
geom_bar(stat = "identity", position = "dodge")
# Plot summary values for four conditions
ggplot(new_click_data,
aes(x = Gender,
y = Age,
fill = impression_mean)) +
geom_bar(stat = "identity", position = "dodge")
# Plot summary values for four conditions
ggplot(new_click_data,
aes(x = Gender,
y = Age,
color = impression_mean)) +
geom_bar(stat = "identity", position = "dodge")
# Plot summary values for four conditions
ggplot(new_click_data,
aes(x = Gender,
y = Age,
fill = impression_mean)) +
geom_bar(stat = "identity", position = "dodge")
new_click_data
new_click_data <- click_data %>%
group_by(Age, Gender, Clicks) %>%
summarize(impression_mean = mean(Impressions))
new_click_data
ggplot(new_click_data,
aes(x = Gender,
y = Age,
fill = impression_mean)) +
geom_bar(stat = "identity", position = "dodge")
# Plot summary values for four conditions
ggplot(new_click_data,
aes(x = Gender,
y = Age,
color = Clicks,
fill = impression_mean)) +
geom_bar(stat = "identity", position = "dodge")
# Plot summary values for four conditions
ggplot(new_click_data,
aes(x = Gender,
y = impression_mean,
color = Clicks,
fill = Age)) +
geom_bar(stat = "identity", position = "dodge")
multivar_results <- lm(Age ~ Gender * Clicks, data = click_data) %>%
tidy()
multivar_results
# Organize variables and run logistic regression
new_click_data_results <- click_data %>%
mutate(gender = factor(gender,
levels = c("male", "female"))) %>%
mutate(clicks = factor(Clicks,
levels = c("yes", "no"))) %>%
glm(Age ~ gender * clicks,
family = "binomial",
data = .) %>%
tidy()
# Organize variables and run logistic regression
new_click_data_results <- click_data %>%
mutate(gender = factor(Gender,
levels = c("male", "female"))) %>%
mutate(clicks = factor(Clicks,
levels = c("yes", "no"))) %>%
glm(Age ~ gender * clicks,
family = "binomial",
data = .) %>%
tidy()
new_click_data_results
# Organize variables and run logistic regression
new_click_data_results <- click_data %>%
mutate(gender = factor(Gender,
levels = c("0", "1"))) %>%
mutate(clicks = factor(Clicks,
levels = c("1", "0"))) %>%
glm(Age ~ gender * clicks,
family = "binomial",
data = .) %>%
tidy()
new_click_data_results
# Organize variables and run logistic regression
new_click_data_results <- click_data %>%
mutate(gender = factor(Gender,
levels = c("0", "1"))) %>%
mutate(clicks = factor(Clicks,
levels = c("1", "0"))) %>%
glm(gender ~ gender * clicks,
family = "binomial",
data = .) %>%
tidy()
new_click_data_results
