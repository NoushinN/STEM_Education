[
["demo-for-ab-testing.html", "Chapter 8 Demo for A/B testing", " Chapter 8 Demo for A/B testing # load dependencies library(tidyverse) library(powerMediation) library(broom) library(pwr) library(gsDesign) library(powerMediation) Read in data: fileLocation &lt;- &quot;http://stat.columbia.edu/~rachel/datasets/nyt1.csv&quot; click_data &lt;- read.csv(url(fileLocation)) Find oldest and most recent age: min(click_data$Age) ## [1] 0 max(click_data$Age) ## [1] 108 Compute baseline conversion rates: click_data %&gt;% summarize(impression_rate = mean(Impressions)) ## impression_rate ## 1 5.007316 determine baseline for genders: click_data %&gt;% group_by(Gender) %&gt;% summarize(impression_rate = mean(Impressions)) ## # A tibble: 2 x 2 ## Gender impression_rate ## &lt;int&gt; &lt;dbl&gt; ## 1 0 5.01 ## 2 1 5.01 determine baseline for clicks: click_data_age&lt;- click_data %&gt;% group_by(Clicks, Age) %&gt;% summarize(impression_rate = mean(Impressions)) visualize baselines: ggplot(click_data_age, aes(x = Age, y = impression_rate)) + geom_point() + geom_line() Experimental design, power analysis, and t-tests run power analysis: learn more here: help(SSizeLogisticBin) total_sample_size &lt;- SSizeLogisticBin(p1 = 0.2, # conversion rate for control condition p2 = 0.3, # conversion rate for expected conversion rate for test condition: backed by previous data (e.g.30% conversion rate to get 10% boost) B = 0.5, # most commonly used alpha = 0.05, # most commonly used power = 0.8) # most commonly used total_sample_size ## [1] 587 total_sample_size /2 # per condition ## [1] 293.5 can use a ttest or linear regression for statistical tests: lm is used when more variables are in data but similar to t-test lm(Gender ~ Clicks, data = click_data) %&gt;% summary() ## ## Call: ## lm(formula = Gender ~ Clicks, data = click_data) ## ## Residuals: ## Min 1Q Median 3Q Max ## -0.375 -0.375 -0.375 0.625 0.884 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 0.3750325 0.0007418 505.56 &lt;2e-16 *** ## Clicks -0.0863451 0.0022930 -37.66 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 0.4813 on 458439 degrees of freedom ## Multiple R-squared: 0.003083, Adjusted R-squared: 0.003081 ## F-statistic: 1418 on 1 and 458439 DF, p-value: &lt; 2.2e-16 # t.test(Gender ~ Clicks, data = click_data) %&gt;% # summary() Analyzing results Group and summarize click_data_groups &lt;- click_data %&gt;% group_by(Clicks, Age) %&gt;% summarize(impression_rate = mean(Impressions)) Make plot of conversion rates for clicks: ggplot(click_data_groups, aes(x = Age, y = impression_rate, color = Clicks, group = Clicks)) + geom_point(size = 3) + geom_line(lwd = 1) Make plot of conversion rates for clicks (can add intercepts and interaction of two variables): ggplot(click_data_groups, aes(x = Age, y = impression_rate, color = Clicks, group = interaction(Clicks, impression_rate))) + geom_point(size = 3) + geom_line(lwd = 1) + geom_vline(xintercept = as.numeric(as.Date(&quot;2018-02-15&quot;))) Check for glm documentation family can be used to express different error distributions. ?glm Run logistic regression to analyze model outputs: experiment_results &lt;- glm(Gender ~ Clicks, family = &quot;binomial&quot;, data = click_data) %&gt;% tidy() experiment_results ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -0.510 0.00319 -160. 0. ## 2 Clicks -0.400 0.0107 -37.3 4.10e-304 Follow-up experimentations to test assumptions Designing follow-up experiments since A/B testing is a continuous loops i.e. make new dataframes and compute various other conversion rate differences can use spread() to reformat data click_data_new_groups &lt;- click_data %&gt;% group_by(Clicks, Age) %&gt;% summarize(impression_rate = mean(Impressions)) %&gt;% spread(Clicks, impression_rate) Compute summary statistics: mean(click_data_new_groups$Age, na.rm = TRUE) ## [1] 55.9802 sd(click_data_new_groups$Age, na.rm = TRUE) ## [1] 29.4771 Run logistic regression and power analysis Run power analysis for logistic regression total_sample_size &lt;- SSizeLogisticBin(p1 = 0.49, p2 = 0.64, B = 0.5, alpha = 0.05, power = 0.8) total_sample_size ## [1] 341 View summary of data: new_data &lt;- click_data %&gt;% group_by(Clicks) %&gt;% summarize(impression_rate = mean(Impressions)/10) # Run logistic regression to analyze model outputs followup_experiment_sep_results &lt;- glm(impression_rate ~ Clicks, family = &quot;binomial&quot;, data = new_data) %&gt;% tidy() ## Warning in eval(family$initialize): non-integer #successes in a binomial glm! followup_experiment_sep_results ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 0.00899 1.59 0.00566 0.995 ## 2 Clicks 0.361 0.710 0.509 0.611 Specifics of A/B Testing= use of experimental design to compare 2 or more variants of a design Test Types: A/B, A/A, A/B/N test conditions Assumptions to test: within group vs. between group experiments e.g. plotting A/A data Compute conversion rates for A/A experiment: click_data_sum &lt;- click_data %&gt;% group_by(Signed_In) %&gt;% summarize(impression_rate = mean(Impressions)/10) click_data_sum ## # A tibble: 2 x 2 ## Signed_In impression_rate ## &lt;int&gt; &lt;dbl&gt; ## 1 0 0.500 ## 2 1 0.501 Plot conversion rates for two conditions: ggplot(click_data_sum, aes(x = Signed_In, y = impression_rate)) + geom_bar(stat = &quot;identity&quot;) #Based on these bar plots the two A conditions look very similar. That&#39;s good! Run logistic regression to analyze model outputs: aa_experiment_results &lt;- glm(Signed_In ~ impression_rate, family = &quot;binomial&quot;, data = click_data_sum) %&gt;% tidy() aa_experiment_results ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -21589. 51475133. -0.000419 1.00 ## 2 impression_rate 43135. 102844880. 0.000419 1.00 Confounding variables: element that can affect the truth of A/B exp change one element at a time to know the change you are testing Need to also consider the side effects procedures are the same as above Power analysis requires 3 variables: power (1-beta) , significance level (alpha or p-value), effect size as power goes up, so does the of data points needed as significance level goes up (i.e. more significant), so do of data points needed as effect sizw increase, of data points decrease ttest (linear regression) can be used for continuous dependent variable (e.g. time spent on a website) pwr.t.test(power = 0.8, sig.level = 0.05, d = 0.6) # d = effect size ## ## Two-sample t test power calculation ## ## n = 44.58577 ## d = 0.6 ## sig.level = 0.05 ## power = 0.8 ## alternative = two.sided ## ## NOTE: n is number in *each* group pwr.t.test(power = 0.8, sig.level = 0.05, d = 0.2) #(see more on experimental design) ## ## Two-sample t test power calculation ## ## n = 393.4057 ## d = 0.2 ## sig.level = 0.05 ## power = 0.8 ## alternative = two.sided ## ## NOTE: n is number in *each* group Load package to run power analysis: library(powerMediation) logistic regression can be used for categorical dependent variable (e.g. click or not click) Run power analysis for logistic regression total_sample_size &lt;- SSizeLogisticBin(p1 = 0.17, # assuming a control value of 17% p2 = 0.27, # assuming 10% increase in the test condition B = 0.5, alpha = 0.05, power = 0.8) total_sample_size ## [1] 537 Stopping rules and sequential analysis procedures that allow interim analyses in pre-defined points = sequential analysis seq_analysis &lt;- gsDesign(k=4, # number of times you want to look at the data test.type = 1, alpha = 0.05, beta = 0.2, # power = 1-beta so power is 0.8 sfu = &quot;Pocock&quot;) # spending function to figure out how to update p-values seq_analysis ## One-sided group sequential design with ## 80 % power and 5 % Type I Error. ## Sample ## Size ## Analysis Ratio* Z Nominal p Spend ## 1 0.306 2.07 0.0193 0.0193 ## 2 0.612 2.07 0.0193 0.0132 ## 3 0.918 2.07 0.0193 0.0098 ## 4 1.224 2.07 0.0193 0.0077 ## Total 0.0500 ## ## ++ alpha spending: ## Pocock boundary. ## * Sample size ratio compared to fixed design with no interim ## ## Boundary crossing probabilities and expected sample size ## assume any cross stops the trial ## ## Upper boundary (power or Type I Error) ## Analysis ## Theta 1 2 3 4 Total E{N} ## 0.0000 0.0193 0.0132 0.0098 0.0077 0.05 1.1952 ## 2.4865 0.2445 0.2455 0.1845 0.1255 0.80 0.7929 max_n &lt;- 1000 max_n_per_group &lt;- max_n / 2 stopping_points &lt;- max_n_per_group * seq_analysis$timing stopping_points ## [1] 125 250 375 500 Run sequential analysis: seq_analysis_3looks &lt;- gsDesign(k = 3, test.type = 1, alpha = 0.05, beta = 0.2, sfu = &quot;Pocock&quot;) seq_analysis_3looks ## One-sided group sequential design with ## 80 % power and 5 % Type I Error. ## Sample ## Size ## Analysis Ratio* Z Nominal p Spend ## 1 0.394 1.99 0.0232 0.0232 ## 2 0.789 1.99 0.0232 0.0155 ## 3 1.183 1.99 0.0232 0.0113 ## Total 0.0500 ## ## ++ alpha spending: ## Pocock boundary. ## * Sample size ratio compared to fixed design with no interim ## ## Boundary crossing probabilities and expected sample size ## assume any cross stops the trial ## ## Upper boundary (power or Type I Error) ## Analysis ## Theta 1 2 3 Total E{N} ## 0.0000 0.0232 0.0155 0.0113 0.05 1.1591 ## 2.4865 0.3334 0.2875 0.1791 0.80 0.8070 Fill in max number of points and compute points per group and find stopping points max_n &lt;- 3000 max_n_per_group &lt;- max_n / 2 stopping_points = max_n_per_group * seq_analysis_3looks$timing stopping_points ## [1] 500 1000 1500 Multivariate testing (i.e. more than one independent variable in the experiment) Compute summary values for four conditions new_click_data &lt;- click_data %&gt;% group_by(Age, Gender, Clicks) %&gt;% summarize(impression_mean = mean(Impressions)) # Plot summary values for four conditions ggplot(new_click_data, aes(x = Gender, y = impression_mean, color = Clicks, fill = Age)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) multivar_results &lt;- lm(Age ~ Gender * Clicks, data = click_data) %&gt;% tidy() multivar_results$p.value #none are significant ## [1] 0.000000e+00 0.000000e+00 0.000000e+00 3.569988e-236 multivar_results ## # A tibble: 4 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 23.4 0.0427 549. 0. ## 2 Gender 17.2 0.0699 246. 0. ## 3 Clicks -5.00 0.123 -40.8 0. ## 4 Gender:Clicks 7.72 0.235 32.8 3.57e-236 Organize variables and run logistic regression: new_click_data_results &lt;- click_data %&gt;% mutate(gender = factor(Gender, levels = c(&quot;0&quot;, &quot;1&quot;))) %&gt;% mutate(clicks = factor(Clicks, levels = c(&quot;1&quot;, &quot;0&quot;))) %&gt;% glm(gender ~ gender * clicks, family = &quot;binomial&quot;, data = .) %&gt;% tidy() ## Warning in model.matrix.default(mt, mf, contrasts): the response appeared on the ## right-hand side and was dropped ## Warning in model.matrix.default(mt, mf, contrasts): problem with term 1 in ## model.matrix: no columns are assigned new_click_data_results ## # A tibble: 3 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) -0.894 0.0114 -78.5 0 ## 2 clicks0 -21.7 94.2 -0.230 0.818 ## 3 gender1:clicks0 45.1 154. 0.293 0.769 "]
]
