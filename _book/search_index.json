[
["working-with-dates-in-r.html", "Chapter 6 Working with dates in R", " Chapter 6 Working with dates in R library(ggplot2) library(dplyr) library(ggridges) library(hflights) library(lubridate) library(hflights) library(fasttime) library(microbenchmark) library(anytime) library(readr) #check lubridate functions for fun :) today() ## [1] &quot;2020-09-21&quot; now() ## [1] &quot;2020-09-21 21:01:43 EDT&quot; # and check your local timezone Sys.timezone() ## [1] &quot;America/Toronto&quot; Rule to work with dates according to ISO 8601 standard format is YYYY-MM-DD # The date R 3.0.0 was released x &lt;- &quot;2013-04-03&quot; # Examine structure of x str(x) ## chr &quot;2013-04-03&quot; # Use as.Date() to interpret x as a date x_date &lt;- as.Date(x) # Examine structure of x_date str(x_date) ## Date[1:1], format: &quot;2013-04-03&quot; # Store April 10 2019 as a Date april_10_2019 &lt;- as.Date(&quot;2019-04-10&quot;) # round dates r_3_4_1 &lt;- ymd_hms(&quot;2016-05-03 07:13:28 UTC&quot;) # Round down to day floor_date(r_3_4_1, unit = &quot;day&quot;) ## [1] &quot;2016-05-03 UTC&quot; # Round to nearest 5 minutes round_date(r_3_4_1, unit = &quot;5 minutes&quot;) ## [1] &quot;2016-05-03 07:15:00 UTC&quot; # Round up to week ceiling_date(r_3_4_1, unit = &quot;week&quot;) ## [1] &quot;2016-05-08 UTC&quot; # Subtract r_3_4_1 rounded down to day r_3_4_1 - floor_date(r_3_4_1, unit = &quot;day&quot;) ## Time difference of 7.224444 hours Setting the timezone: # Game2: CAN vs NZL in Edmonton game2 &lt;- mdy_hm(&quot;June 11 2015 19:00&quot;) # Game3: CHN vs NZL in Winnipeg game3 &lt;- mdy_hm(&quot;June 15 2015 18:30&quot;) # Set the timezone to &quot;America/Edmonton&quot; game2_local &lt;- force_tz(game2, tzone = &quot;America/Edmonton&quot;) game2_local ## [1] &quot;2015-06-11 19:00:00 MDT&quot; # Set the timezone to &quot;America/Winnipeg&quot; game3_local &lt;- force_tz(game3, tzone = &quot;America/Winnipeg&quot;) game3_local ## [1] &quot;2015-06-15 18:30:00 CDT&quot; # How long does the team have to rest? as.period(game2_local %--% game3_local) ## [1] &quot;3d 22H 30M 0S&quot; # What time is game2_local in NZ? with_tz(game2_local, tzone = &quot;Pacific/Auckland&quot;) ## [1] &quot;2015-06-12 13:00:00 NZST&quot; # What time is game2_local in Corvallis, Oregon? with_tz(game2_local, tzone = &quot;America/Los_Angeles&quot;) ## [1] &quot;2015-06-11 18:00:00 PDT&quot; # What time is game3_local in NZ? with_tz(game3_local, tzone = &quot;Pacific/Auckland&quot;) ## [1] &quot;2015-06-16 11:30:00 NZST&quot; Examine DepTime and ArrTime in library(hflights) and others: library(hflights) head(hflights$DepTime, 2) ## [1] 1400 1401 head(hflights$ArrTime, 2) ## [1] 1500 1501 # Examine structure of time column str(hflights$DepTime) ## int [1:227496] 1400 1401 1352 1403 1405 1359 1359 1355 1443 1443 ... str(hflights$ArrTime) ## int [1:227496] 1500 1501 1502 1513 1507 1503 1509 1454 1554 1553 ... min(hflights$Year) ## [1] 2011 max(hflights$Year) ## [1] 2011 tibble::glimpse(hflights) %&gt;% head() ## Rows: 227,496 ## Columns: 21 ## $ Year &lt;int&gt; 2011, 2011, 2011, 2011, 2011, 2011, 2011, 2011, 201… ## $ Month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … ## $ DayofMonth &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, … ## $ DayOfWeek &lt;int&gt; 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, … ## $ DepTime &lt;int&gt; 1400, 1401, 1352, 1403, 1405, 1359, 1359, 1355, 144… ## $ ArrTime &lt;int&gt; 1500, 1501, 1502, 1513, 1507, 1503, 1509, 1454, 155… ## $ UniqueCarrier &lt;chr&gt; &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA&quot;, &quot;AA… ## $ FlightNum &lt;int&gt; 428, 428, 428, 428, 428, 428, 428, 428, 428, 428, 4… ## $ TailNum &lt;chr&gt; &quot;N576AA&quot;, &quot;N557AA&quot;, &quot;N541AA&quot;, &quot;N403AA&quot;, &quot;N492AA&quot;, &quot;… ## $ ActualElapsedTime &lt;int&gt; 60, 60, 70, 70, 62, 64, 70, 59, 71, 70, 70, 56, 63,… ## $ AirTime &lt;int&gt; 40, 45, 48, 39, 44, 45, 43, 40, 41, 45, 42, 41, 44,… ## $ ArrDelay &lt;int&gt; -10, -9, -8, 3, -3, -7, -1, -16, 44, 43, 29, 5, -9,… ## $ DepDelay &lt;int&gt; 0, 1, -8, 3, 5, -1, -1, -5, 43, 43, 29, 19, -2, -3,… ## $ Origin &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;IAH&quot;, &quot;IAH&quot;, &quot;IAH&quot;, &quot;IAH&quot;, &quot;IAH&quot;, &quot;I… ## $ Dest &lt;chr&gt; &quot;DFW&quot;, &quot;DFW&quot;, &quot;DFW&quot;, &quot;DFW&quot;, &quot;DFW&quot;, &quot;DFW&quot;, &quot;DFW&quot;, &quot;D… ## $ Distance &lt;int&gt; 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 2… ## $ TaxiIn &lt;int&gt; 7, 6, 5, 9, 9, 6, 12, 7, 8, 6, 8, 4, 6, 5, 6, 12, 8… ## $ TaxiOut &lt;int&gt; 13, 9, 17, 22, 9, 13, 15, 12, 22, 19, 20, 11, 13, 1… ## $ Cancelled &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## $ CancellationCode &lt;chr&gt; &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;,… ## $ Diverted &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … ## Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum ## 5424 2011 1 1 6 1400 1500 AA 428 ## 5425 2011 1 2 7 1401 1501 AA 428 ## 5426 2011 1 3 1 1352 1502 AA 428 ## 5427 2011 1 4 2 1403 1513 AA 428 ## 5428 2011 1 5 3 1405 1507 AA 428 ## 5429 2011 1 6 4 1359 1503 AA 428 ## TailNum ActualElapsedTime AirTime ArrDelay DepDelay Origin Dest Distance ## 5424 N576AA 60 40 -10 0 IAH DFW 224 ## 5425 N557AA 60 45 -9 1 IAH DFW 224 ## 5426 N541AA 70 48 -8 -8 IAH DFW 224 ## 5427 N403AA 70 39 3 3 IAH DFW 224 ## 5428 N492AA 62 44 -3 5 IAH DFW 224 ## 5429 N262AA 64 45 -7 -1 IAH DFW 224 ## TaxiIn TaxiOut Cancelled CancellationCode Diverted ## 5424 7 13 0 0 ## 5425 6 9 0 0 ## 5426 5 17 0 0 ## 5427 9 22 0 0 ## 5428 9 9 0 0 ## 5429 6 13 0 0 Are DepTime and ArrTime the same moments table(hflights$DepTime - hflights$ArrTime) %&gt;% head() ## ## -1350 -1154 -1111 -1108 -1067 -1051 ## 1 1 1 1 1 1 # A plot using just time ggplot(hflights, aes(x = DepTime, y = ArrTime)) + geom_line(aes(group = make_date(Year, Month, DayofMonth)), alpha = 0.2) ## Warning: Removed 2907 row(s) containing missing values (geom_path). Force datetime to Pacific/Auckland: hflights_hourly &lt;- hflights %&gt;% mutate( Dep = make_date(Year, Month, DayofMonth), newDep = force_tz(Dep, tzone = &quot;Pacific/Auckland&quot;)) # check whether times changed ## hflights_hourly$newDep == hflights$DepTime Taking differences of datetimes - difftime(time1, time2) takes an argument units which specifies the units for the difference. - Your options are “secs”, “mins”, “hours”, “days”, or “weeks” The date landing and moment of step date_landing &lt;- mdy(&quot;July 20, 1969&quot;) moment_step &lt;- mdy_hms(&quot;July 20, 1969, 02:56:15&quot;, tz = &quot;UTC&quot;) # How many days since the first man on the moon? difftime(today(), date_landing, units = &quot;days&quot;) ## Time difference of 18691 days # How many seconds since the first man on the moon? difftime(now(), moment_step, units = &quot;secs&quot;) ## Time difference of 1614981937 secs # another example with three dates mar_11 &lt;- ymd_hms(&quot;2017-03-11 12:00:00&quot;, tz = &quot;America/Los_Angeles&quot;) mar_12 &lt;- ymd_hms(&quot;2017-03-12 12:00:00&quot;, tz = &quot;America/Los_Angeles&quot;) mar_13 &lt;- ymd_hms(&quot;2017-03-13 12:00:00&quot;, tz = &quot;America/Los_Angeles&quot;) # Difference between mar_13 and mar_12 in seconds difftime(mar_13, mar_12, units = &quot;secs&quot;) ## Time difference of 86400 secs # Difference between mar_12 and mar_11 in seconds difftime(mar_12, mar_11, units = &quot;secs&quot;) ## Time difference of 82800 secs Getting datetimes into R Use as.POSIXct to enter the datetime as.POSIXct(&quot;2010-10-01 12:12:00&quot;) ## [1] &quot;2010-10-01 12:12:00 EDT&quot; # Use as.POSIXct again but set the timezone to `&quot;America/Los_Angeles&quot;` as.POSIXct(&quot;2010-10-01 12:12:00&quot;, tz = &quot;America/Los_Angeles&quot;) ## [1] &quot;2010-10-01 12:12:00 PDT&quot; timespans Add a period of one week to mon_2pm mon_2pm &lt;- dmy_hm(&quot;27 Aug 2018 14:00&quot;) mon_2pm + weeks(1) ## [1] &quot;2018-09-03 14:00:00 UTC&quot; # Add a duration of 81 hours to tue_9am tue_9am &lt;- dmy_hm(&quot;28 Aug 2018 9:00&quot;) tue_9am + hours(81) ## [1] &quot;2018-08-31 18:00:00 UTC&quot; # Subtract a period of five years from today() today() - years(5) ## [1] &quot;2015-09-21&quot; # Subtract a duration of five years from today() today() - dyears(5) ## [1] &quot;2015-09-21 18:00:00 UTC&quot; # Arithmetic with timespans ## Time of North American Eclipse 2017 eclipse_2017 &lt;- ymd_hms(&quot;2017-08-21 18:26:40&quot;) # Duration of 29 days, 12 hours, 44 mins and 3 secs synodic &lt;- ddays(29) + dhours(12) + dminutes(44) + dseconds(3) # 223 synodic months saros &lt;- 223*synodic # Add saros to eclipse_2017 eclipse_2017 + saros ## [1] &quot;2035-09-02 02:09:49 UTC&quot; Generating sequences of datetimes and arithmetics Add a period of 8 hours to today today_8am &lt;- today() + hours(8) # Sequence of two weeks from 1 to 26 every_two_weeks &lt;- 1:26 * weeks(2) # Create datetime for every two weeks for a year today_8am + every_two_weeks ## [1] &quot;2020-10-05 08:00:00 UTC&quot; &quot;2020-10-19 08:00:00 UTC&quot; ## [3] &quot;2020-11-02 08:00:00 UTC&quot; &quot;2020-11-16 08:00:00 UTC&quot; ## [5] &quot;2020-11-30 08:00:00 UTC&quot; &quot;2020-12-14 08:00:00 UTC&quot; ## [7] &quot;2020-12-28 08:00:00 UTC&quot; &quot;2021-01-11 08:00:00 UTC&quot; ## [9] &quot;2021-01-25 08:00:00 UTC&quot; &quot;2021-02-08 08:00:00 UTC&quot; ## [11] &quot;2021-02-22 08:00:00 UTC&quot; &quot;2021-03-08 08:00:00 UTC&quot; ## [13] &quot;2021-03-22 08:00:00 UTC&quot; &quot;2021-04-05 08:00:00 UTC&quot; ## [15] &quot;2021-04-19 08:00:00 UTC&quot; &quot;2021-05-03 08:00:00 UTC&quot; ## [17] &quot;2021-05-17 08:00:00 UTC&quot; &quot;2021-05-31 08:00:00 UTC&quot; ## [19] &quot;2021-06-14 08:00:00 UTC&quot; &quot;2021-06-28 08:00:00 UTC&quot; ## [21] &quot;2021-07-12 08:00:00 UTC&quot; &quot;2021-07-26 08:00:00 UTC&quot; ## [23] &quot;2021-08-09 08:00:00 UTC&quot; &quot;2021-08-23 08:00:00 UTC&quot; ## [25] &quot;2021-09-06 08:00:00 UTC&quot; &quot;2021-09-20 08:00:00 UTC&quot; # A sequence of 1 to 12 periods of 1 month month_seq &lt;- 1:12 * months(1) # Add 1 to 12 months to today_8am today_8am + month_seq ## [1] &quot;2020-10-21 08:00:00 UTC&quot; &quot;2020-11-21 08:00:00 UTC&quot; ## [3] &quot;2020-12-21 08:00:00 UTC&quot; &quot;2021-01-21 08:00:00 UTC&quot; ## [5] &quot;2021-02-21 08:00:00 UTC&quot; &quot;2021-03-21 08:00:00 UTC&quot; ## [7] &quot;2021-04-21 08:00:00 UTC&quot; &quot;2021-05-21 08:00:00 UTC&quot; ## [9] &quot;2021-06-21 08:00:00 UTC&quot; &quot;2021-07-21 08:00:00 UTC&quot; ## [11] &quot;2021-08-21 08:00:00 UTC&quot; &quot;2021-09-21 08:00:00 UTC&quot; # Replace + with %m+% today_8am %m+% month_seq ## [1] &quot;2020-10-21 08:00:00 UTC&quot; &quot;2020-11-21 08:00:00 UTC&quot; ## [3] &quot;2020-12-21 08:00:00 UTC&quot; &quot;2021-01-21 08:00:00 UTC&quot; ## [5] &quot;2021-02-21 08:00:00 UTC&quot; &quot;2021-03-21 08:00:00 UTC&quot; ## [7] &quot;2021-04-21 08:00:00 UTC&quot; &quot;2021-05-21 08:00:00 UTC&quot; ## [9] &quot;2021-06-21 08:00:00 UTC&quot; &quot;2021-07-21 08:00:00 UTC&quot; ## [11] &quot;2021-08-21 08:00:00 UTC&quot; &quot;2021-09-21 08:00:00 UTC&quot; # %m+% and %m-% are operators not functions. ## That means you don&#39;t need parentheses, just put the operator between the two objects to add or subtract. # Replace + with %m-% today_8am %m-% month_seq ## [1] &quot;2020-08-21 08:00:00 UTC&quot; &quot;2020-07-21 08:00:00 UTC&quot; ## [3] &quot;2020-06-21 08:00:00 UTC&quot; &quot;2020-05-21 08:00:00 UTC&quot; ## [5] &quot;2020-04-21 08:00:00 UTC&quot; &quot;2020-03-21 08:00:00 UTC&quot; ## [7] &quot;2020-02-21 08:00:00 UTC&quot; &quot;2020-01-21 08:00:00 UTC&quot; ## [9] &quot;2019-12-21 08:00:00 UTC&quot; &quot;2019-11-21 08:00:00 UTC&quot; ## [11] &quot;2019-10-21 08:00:00 UTC&quot; &quot;2019-09-21 08:00:00 UTC&quot; Intervals The operator %within% tests if the datetime (or interval) on the left hand side is within the interval of the right hand side. New column for interval from start to end date: hflights_intervals &lt;- hflights %&gt;% mutate( start_date = make_datetime(Year, Month, DayofMonth, DepTime), end_date = make_datetime(Year, Month, DayofMonth, ArrTime), visible = start_date %--% end_date) # The individual elements hflights_intervals$visible[14, ] ## [1] 2011-03-11 13:00:00 UTC--2011-03-17 16:00:00 UTC # within hflights_intervals %&gt;% filter(hflights_intervals$start_date %in% hflights_intervals$end_date) %&gt;% select(Year, Month, DayofMonth, ArrTime) %&gt;% head() ## Year Month DayofMonth ArrTime ## 1 2011 1 1 1500 ## 2 2011 1 2 1501 ## 3 2011 1 3 1502 ## 4 2011 1 4 1513 ## 5 2011 1 5 1507 ## 6 2011 1 6 1503 #can create an interval by using the operator %–% with two datetimes. For example ymd(“2001-01-01”) %–% ymd(“2001-12-31”) creates an interval for the year of 2001. Once you have an interval you can find out certain properties like its start, end and length with int_start(), int_end() and int_length() respectively. Create an interval for flights flights &lt;- hflights_intervals %&gt;% mutate(ints = start_date %--% end_date) # Find the length of flights, and arrange flights %&gt;% mutate(length = length(hflights_intervals$start_date)) %&gt;% arrange(desc(length)) %&gt;% head() ## Year Month DayofMonth DayOfWeek DepTime ArrTime UniqueCarrier FlightNum ## 1 2011 1 1 6 1400 1500 AA 428 ## 2 2011 1 2 7 1401 1501 AA 428 ## 3 2011 1 3 1 1352 1502 AA 428 ## 4 2011 1 4 2 1403 1513 AA 428 ## 5 2011 1 5 3 1405 1507 AA 428 ## 6 2011 1 6 4 1359 1503 AA 428 ## TailNum ActualElapsedTime AirTime ArrDelay DepDelay Origin Dest Distance ## 1 N576AA 60 40 -10 0 IAH DFW 224 ## 2 N557AA 60 45 -9 1 IAH DFW 224 ## 3 N541AA 70 48 -8 -8 IAH DFW 224 ## 4 N403AA 70 39 3 3 IAH DFW 224 ## 5 N492AA 62 44 -3 5 IAH DFW 224 ## 6 N262AA 64 45 -7 -1 IAH DFW 224 ## TaxiIn TaxiOut Cancelled CancellationCode Diverted start_date ## 1 7 13 0 0 2011-02-28 08:00:00 ## 2 6 9 0 0 2011-03-01 09:00:00 ## 3 5 17 0 0 2011-02-28 08:00:00 ## 4 9 22 0 0 2011-03-03 11:00:00 ## 5 9 9 0 0 2011-03-04 13:00:00 ## 6 6 13 0 0 2011-03-03 15:00:00 ## end_date visible ## 1 2011-03-04 12:00:00 2011-02-28 08:00:00 UTC--2011-03-04 12:00:00 UTC ## 2 2011-03-05 13:00:00 2011-03-01 09:00:00 UTC--2011-03-05 13:00:00 UTC ## 3 2011-03-06 14:00:00 2011-02-28 08:00:00 UTC--2011-03-06 14:00:00 UTC ## 4 2011-03-08 01:00:00 2011-03-03 11:00:00 UTC--2011-03-08 01:00:00 UTC ## 5 2011-03-08 19:00:00 2011-03-04 13:00:00 UTC--2011-03-08 19:00:00 UTC ## 6 2011-03-09 15:00:00 2011-03-03 15:00:00 UTC--2011-03-09 15:00:00 UTC ## ints length ## 1 2011-02-28 08:00:00 UTC--2011-03-04 12:00:00 UTC 227496 ## 2 2011-03-01 09:00:00 UTC--2011-03-05 13:00:00 UTC 227496 ## 3 2011-02-28 08:00:00 UTC--2011-03-06 14:00:00 UTC 227496 ## 4 2011-03-03 11:00:00 UTC--2011-03-08 01:00:00 UTC 227496 ## 5 2011-03-04 13:00:00 UTC--2011-03-08 19:00:00 UTC 227496 ## 6 2011-03-03 15:00:00 UTC--2011-03-09 15:00:00 UTC 227496 Intervals are the most specific way to represent a span of time since they retain information about the exact start and end moments. They can be converted to periods and durations exactly: it’s possible to calculate both the exact number of seconds elapsed between the start and end date, as well as the perceived change in clock time.New columns for duration and period Load the readr package which also has build-in functions for dealing with dates: anytime package: # Various ways of writing Sep 10 2009 sep_10_2009 &lt;- c(&quot;September 10 2009&quot;, &quot;2009-09-10&quot;, &quot;10 Sep 2009&quot;, &quot;09-10-2009&quot;) # Use anytime() to parse sep_10_2009 library(anytime) anytime(sep_10_2009) ## [1] &quot;2009-09-10 EDT&quot; &quot;2009-09-10 EDT&quot; &quot;2009-09-10 EDT&quot; &quot;2009-09-10 EDT&quot; # Extract the month of hflights month(hflights$Month) %&gt;% table() ## . ## 1 2 3 4 5 6 7 8 9 10 11 12 ## 18910 17128 19470 18593 19172 19600 20548 20176 18065 18696 18021 19117 # How often is the hour before 12 (noon)? mean(as.POSIXct(hflights$DepTime, origin=&quot;1991-01-01&quot;)) ## [1] NA # Use wday() to tabulate release by day of the week wday(hflights$DepTime) %&gt;% table() %&gt;% head() ## . ## 1 2 3 4 5 6 ## 7 2 4 7 3 5 # Add label = TRUE to make table more readable wday(hflights$DepTime, label = TRUE) %&gt;% table() %&gt;% head() ## . ## Sun Mon Tue Wed Thu Fri ## 7 2 4 7 3 5 # Create column wday to hold week days hflights$wday &lt;- wday(hflights$DepTime, label = TRUE) Parsing dates with lubridate # Parse x x &lt;- &quot;2010 September 20th&quot; ymd(x) ## [1] &quot;2010-09-20&quot; # Parse y y &lt;- &quot;02.01.2010&quot; dmy(y) ## [1] &quot;2010-01-02&quot; # Parse z z &lt;- &quot;Sep, 12th 2010 14:00&quot; mdy_hm(z) ## [1] &quot;2010-09-12 14:00:00 UTC&quot; # Specifying an order with `parse_date_time()` ## Specify an order string to parse x x &lt;- &quot;Monday June 1st 2010 at 4pm&quot; parse_date_time(x, orders = &quot;ABdyIp&quot;) ## [1] &quot;2010-06-01 16:00:00 UTC&quot; # Specify order to include both &quot;mdy&quot; and &quot;dmy&quot; two_orders &lt;- c(&quot;October 7, 2001&quot;, &quot;October 13, 2002&quot;, &quot;April 13, 2003&quot;, &quot;17 April 2005&quot;, &quot;23 April 2017&quot;) parse_date_time(two_orders, orders = c(&quot;mdy&quot;, &quot;dmy&quot;)) ## [1] &quot;2001-10-07 UTC&quot; &quot;2002-10-13 UTC&quot; &quot;2003-04-13 UTC&quot; &quot;2005-04-17 UTC&quot; ## [5] &quot;2017-04-23 UTC&quot; # Specify order to include &quot;dOmY&quot;, &quot;OmY&quot; and &quot;Y&quot; short_dates &lt;- c(&quot;11 December 1282&quot;, &quot;May 1372&quot;, &quot;1253&quot;) parse_date_time(short_dates, orders = c(&quot;dOmY&quot;, &quot;OmY&quot;, &quot;Y&quot;)) ## [1] &quot;1282-12-11 UTC&quot; &quot;1372-05-01 UTC&quot; &quot;1253-01-01 UTC&quot; Use make_date() to combine year, month and mday: hflights_dates &lt;- hflights %&gt;% mutate(date = make_date(year = Year, month = Month, day = DayofMonth)) # Plot to check work ggplot(hflights_dates, aes(x = date, y = DepDelay)) + geom_line() If you plot a Date on the axis of a plot, you expect the dates to be in calendar order, #and that’s exactly what happens with plot() or ggplot(). Set the x axis to the date column: ggplot(hflights, aes(x = Year, y = DayofMonth)) + geom_line(aes(group = 1, color = factor(Month))) Outputting pretty dates and times Create a stamp based on April 04 2019: D &lt;- ymd(&quot;2019-04-04&quot;) - days(1:5) stamp(&quot;Created on Sunday, Jan 1, 1999 3:34 pm&quot;)(D) ## [1] &quot;Created on Wednesday, Apr 03, 2019 12:00 am&quot; ## [2] &quot;Created on Tuesday, Apr 02, 2019 12:00 am&quot; ## [3] &quot;Created on Monday, Apr 01, 2019 12:00 am&quot; ## [4] &quot;Created on Sunday, Mar 31, 2019 12:00 am&quot; ## [5] &quot;Created on Saturday, Mar 30, 2019 12:00 am&quot; More on importing and exporting datetimes Fast parsing with fasttime The fasttime package provides a single function fastPOSIXct() #designed to read in datetimes formatted according to ISO 8601. #Because it only reads in one format, and doesn’t have to guess a format, it is really fast! The arguments to microbenchmark() are just R expressions that you want to time. Make sure you match up the names of these arguments to the parsing functions. Use fastPOSIXct() to parse dates library(fasttime) library(microbenchmark) fastPOSIXct(hflights_dates$date) %&gt;% str() ## POSIXct[1:227496], format: &quot;2010-12-31 19:00:00&quot; &quot;2011-01-01 19:00:00&quot; &quot;2011-01-02 19:00:00&quot; ... "]
]
